// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate3D.Data;

#nullable disable

namespace RealEstate3D.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.10");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstate3D.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "admin-user-id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eeb6e965-dab9-4895-867c-eae15e5326bd",
                            CreatedAt = new DateTime(2025, 10, 6, 23, 42, 53, 371, DateTimeKind.Local).AddTicks(4612),
                            Email = "admin@realestate3d.kg",
                            EmailConfirmed = true,
                            FirstName = "Администратор",
                            IsActive = true,
                            LastLoginAt = new DateTime(2025, 10, 6, 23, 42, 53, 371, DateTimeKind.Local).AddTicks(4615),
                            LastName = "Системы",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@REALESTATE3D.KG",
                            NormalizedUserName = "ADMIN@REALESTATE3D.KG",
                            PasswordHash = "AQAAAAIAAYagAAAAED4wec7Lm0lDGBO/iCgusNA6jRGUDya7BDPLv4KsvMQcF+fK1tmz0+5hCNl70ENxIg==",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "e33e4f7b-2ce5-411f-be8c-817696ac36f6",
                            TwoFactorEnabled = false,
                            UserName = "admin@realestate3d.kg"
                        });
                });

            modelBuilder.Entity("RealEstate3D.Models.FavoriteProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteProperties");
                });

            modelBuilder.Entity("RealEstate3D.Models.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AI3DStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<double>("Area")
                        .HasColumnType("REAL");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<int>("FavoritesCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Floor")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImagePath")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Is3DGenerated")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.Property<double?>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("MetaDescription")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("MetaTitle")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Model3DUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Rooms")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalFloors")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("OwnerId");

                    b.HasIndex("Price");

                    b.HasIndex("PropertyType");

                    b.HasIndex("Status");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AI3DStatus = 2,
                            Address = "Бишкек, микрорайон Восток-5, дом 15",
                            Area = 85.5,
                            ContactInfo = "+996 (555) 123-456",
                            CreatedAt = new DateTime(2025, 9, 26, 23, 42, 53, 446, DateTimeKind.Local).AddTicks(8850),
                            Description = "Просторная квартира с панорамными окнами, современным ремонтом и отличным видом на горы Ала-Тоо. Все коммуникации новые, встроенная кухня, просторные комнаты.",
                            FavoritesCount = 23,
                            Floor = 12,
                            Is3DGenerated = true,
                            Latitude = 42.874600000000001,
                            Location = "Бишкек, Восток-5",
                            Longitude = 74.569800000000001,
                            Model3DUrl = "/models/apartment1.glb",
                            OwnerId = "admin-user-id",
                            Price = 1312500000m,
                            PropertyType = "Квартира",
                            Rooms = 3,
                            Status = 0,
                            Title = "Современная 3-комнатная квартира в Бишкеке",
                            TotalFloors = 25,
                            ViewsCount = 156
                        },
                        new
                        {
                            Id = 2,
                            AI3DStatus = 2,
                            Address = "Ош, район Сулайман-Тоо, ул. Ленина 123",
                            Area = 180.0,
                            ContactInfo = "+996 (700) 765-432",
                            CreatedAt = new DateTime(2025, 10, 1, 23, 42, 53, 446, DateTimeKind.Local).AddTicks(8873),
                            Description = "Двухэтажный дом в экологически чистом районе с видом на гору Сулайман-Тоо. Большой участок с садом, гараж на 2 машины, баня, беседка. Идеально для семьи с детьми.",
                            FavoritesCount = 12,
                            Floor = 1,
                            Is3DGenerated = true,
                            Latitude = 40.513800000000003,
                            Location = "Ош, Сулайман-Тоо",
                            Longitude = 72.7958,
                            Model3DUrl = "/models/house1.glb",
                            OwnerId = "admin-user-id",
                            Price = 2187500000m,
                            PropertyType = "Дом",
                            Rooms = 5,
                            Status = 0,
                            Title = "Загородный дом в Оше с большим участком",
                            TotalFloors = 2,
                            ViewsCount = 89
                        },
                        new
                        {
                            Id = 3,
                            AI3DStatus = 1,
                            Address = "Джалал-Абад, мкр. Кызыл-Шарк, дом 45",
                            Area = 35.0,
                            ContactInfo = "+996 (770) 555-112",
                            CreatedAt = new DateTime(2025, 10, 4, 23, 42, 53, 446, DateTimeKind.Local).AddTicks(8890),
                            Description = "Уютная студия в новом жилом комплексе. Современная планировка, высокие потолки, французское остекление. Развитая инфраструктура района.",
                            FavoritesCount = 8,
                            Floor = 8,
                            Is3DGenerated = false,
                            Latitude = 40.935600000000001,
                            Location = "Джалал-Абад, Кызыл-Шарк",
                            Longitude = 73.008899999999997,
                            OwnerId = "admin-user-id",
                            Price = 743750000m,
                            PropertyType = "Студия",
                            Rooms = 1,
                            Status = 0,
                            Title = "Студия в Джалал-Абаде с ремонтом",
                            TotalFloors = 17,
                            ViewsCount = 67
                        });
                });

            modelBuilder.Entity("RealEstate3D.Models.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/uploads/properties/apartment1.jpg",
                            IsPrimary = true,
                            Order = 0,
                            PropertyId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/uploads/properties/house1.jpg",
                            IsPrimary = true,
                            Order = 0,
                            PropertyId = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/uploads/properties/cottage1.jpg",
                            IsPrimary = true,
                            Order = 0,
                            PropertyId = 3
                        });
                });

            modelBuilder.Entity("RealEstate3D.Models.PropertyView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PropertyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ViewedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("UserId");

                    b.HasIndex("ViewedAt");

                    b.ToTable("PropertyViews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealEstate3D.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealEstate3D.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate3D.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealEstate3D.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstate3D.Models.FavoriteProperty", b =>
                {
                    b.HasOne("RealEstate3D.Models.Property", "Property")
                        .WithMany("FavoriteProperties")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate3D.Models.ApplicationUser", "User")
                        .WithMany("FavoriteProperties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate3D.Models.Property", b =>
                {
                    b.HasOne("RealEstate3D.Models.ApplicationUser", "Owner")
                        .WithMany("Properties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RealEstate3D.Models.PropertyImage", b =>
                {
                    b.HasOne("RealEstate3D.Models.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("RealEstate3D.Models.PropertyView", b =>
                {
                    b.HasOne("RealEstate3D.Models.Property", "Property")
                        .WithMany("PropertyViews")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealEstate3D.Models.ApplicationUser", "User")
                        .WithMany("PropertyViews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Property");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate3D.Models.ApplicationUser", b =>
                {
                    b.Navigation("FavoriteProperties");

                    b.Navigation("Properties");

                    b.Navigation("PropertyViews");
                });

            modelBuilder.Entity("RealEstate3D.Models.Property", b =>
                {
                    b.Navigation("FavoriteProperties");

                    b.Navigation("Images");

                    b.Navigation("PropertyViews");
                });
#pragma warning restore 612, 618
        }
    }
}
