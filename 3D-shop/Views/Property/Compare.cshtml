@model List<RealEstate3D.Models.Property>
@{
    ViewData["Title"] = "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏";
}

<div class="comparison-page">
    <div class="page-header">
        <div class="container">
            <div class="header-content">
                <h1>üèòÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</h1>
                <p>–°—Ä–∞–≤–Ω–∏—Ç–µ –¥–æ 3 –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ side-by-side</p>
                
                <div class="comparison-controls">
                    <button class="add-property-btn" onclick="openPropertySelector()">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    </button>
                    <button class="clear-comparison-btn" onclick="clearComparison()">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="comparison-container" id="comparison-container">
            @if (Model != null && Model.Any())
            {
                <div class="properties-comparison">
                    @for (int i = 0; i < Math.Min(Model.Count, 3); i++)
                    {
                        var property = Model[i];
                        <div class="property-comparison-card" data-property-id="@property.Id">
                            <div class="card-header">
                                <h3>@property.Title</h3>
                                <button class="remove-btn" onclick="removeFromComparison(@property.Id)">√ó</button>
                            </div>
                            
                            <div class="property-image">
                                @if (!string.IsNullOrEmpty(property.ImagePath))
                                {
                                    <img src="@property.ImagePath" alt="@property.Title" />
                                }
                                else
                                {
                                    <div class="no-image">
                                        <div class="no-image-placeholder">
                                            <span>üè†</span>
                                            <p>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</p>
                                        </div>
                                    </div>
                                }
                                
                                <div class="image-overlay">
                                    <button class="view-3d-btn" onclick="open3DViewer(@property.Id)">
                                        üéØ 3D –ü—Ä–æ—Å–º–æ—Ç—Ä
                                    </button>
                                </div>
                            </div>

                            <div class="comparison-details">
                                <div class="price-section">
                                    <div class="price">@property.Price.ToString("N0") ‚ÇΩ</div>
                                    <div class="price-per-sqm">@(((double)property.Price / property.Area).ToString("N0")) ‚ÇΩ/–º¬≤</div>
                                </div>

                                <div class="specs-comparison">
                                    <div class="spec-item">
                                        <span class="spec-label">–ü–ª–æ—â–∞–¥—å</span>
                                        <span class="spec-value">@property.Area –º¬≤</span>
                                    </div>
                                    <div class="spec-item">
                                        <span class="spec-label">–ö–æ–º–Ω–∞—Ç—ã</span>
                                        <span class="spec-value">@property.Rooms</span>
                                    </div>
                                    <div class="spec-item">
                                        <span class="spec-label">–≠—Ç–∞–∂</span>
                                        <span class="spec-value">@(property.Id % 10 + 1) / @(property.Id % 5 + 5)</span>
                                    </div>
                                    <div class="spec-item">
                                        <span class="spec-label">–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏</span>
                                        <span class="spec-value">@(2020 - (property.Id % 20))</span>
                                    </div>
                                    <div class="spec-item">
                                        <span class="spec-label">–†–∞–π–æ–Ω</span>
                                        <span class="spec-value">@(property.Location ?? "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π")</span>
                                    </div>
                                    <div class="spec-item">
                                        <span class="spec-label">–ü–∞—Ä–∫–æ–≤–∫–∞</span>
                                        <span class="spec-value">@(property.Id % 2 == 0 ? "–î–∞" : "–ù–µ—Ç")</span>
                                    </div>
                                </div>

                                <div class="rating-section">
                                    <div class="rating-item">
                                        <span class="rating-label">–†–µ–π—Ç–∏–Ω–≥</span>
                                        <div class="rating-stars">
                                            @{
                                                var rating = 3 + (property.Id % 3);
                                                for (int j = 1; j <= 5; j++)
                                                {
                                                    if (j <= rating)
                                                    {
                                                        <span class="star filled">‚≠ê</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="star">‚òÜ</span>
                                                    }
                                                }
                                            }
                                            <span class="rating-number">@rating/5</span>
                                        </div>
                                    </div>
                                    
                                    <div class="rating-item">
                                        <span class="rating-label">–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</span>
                                        <div class="transport-rating">
                                            @{
                                                var transportRating = 2 + (property.Id % 4);
                                                var transportLabels = new[] { "", "", "–ü–ª–æ—Ö–æ", "–£–¥–æ–≤–ª.", "–•–æ—Ä–æ—à–æ", "–û—Ç–ª–∏—á–Ω–æ" };
                                            }
                                            <span class="transport-score">@transportLabels[transportRating]</span>
                                        </div>
                                    </div>
                                    
                                    <div class="rating-item">
                                        <span class="rating-label">–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞</span>
                                        <div class="infrastructure-rating">
                                            @{
                                                var infraRating = 2 + (property.Id % 4);
                                                var infraLabels = new[] { "", "", "–°–ª–∞–±–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–•–æ—Ä–æ—à–∞—è", "–†–∞–∑–≤–∏—Ç–∞—è" };
                                            }
                                            <span class="infra-score">@infraLabels[infraRating]</span>
                                        </div>
                                    </div>
                                </div>

                                <div class="action-buttons">
                                    <a href="/Property/Details/@property.Id" class="detail-btn">
                                        üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                    </a>
                                    <button class="favorite-btn @(property.Id % 3 == 0 ? "active" : "")" 
                                            onclick="toggleFavorite(@property.Id)">
                                        ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="comparison-summary">
                    <h3>üìä –°–≤–æ–¥–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h3>
                    <div class="summary-grid">
                        <div class="summary-item">
                            <div class="summary-label">–°–∞–º—ã–π –¥–µ—à–µ–≤—ã–π</div>
                            <div class="summary-value">@Model.OrderBy(p => p.Price).First().Title</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π</div>
                            <div class="summary-value">@Model.OrderByDescending(p => p.Area).First().Title</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">–õ—É—á—à–∞—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤</div>
                            <div class="summary-value">@Model.OrderBy(p => (double)p.Price / p.Area).First().Title</div>
                        </div>
                        <div class="summary-item">
                            <div class="summary-label">–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–æ–º–Ω–∞—Ç</div>
                            <div class="summary-value">@Model.OrderByDescending(p => p.Rooms).First().Title</div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="empty-comparison">
                    <div class="empty-icon">üè†</div>
                    <h3>–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –¥–æ 3 –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</p>
                    <button class="add-first-property-btn" onclick="openPropertySelector()">
                        ‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç
                    </button>
                </div>
            }
        </div>
    </div>

    <!-- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ -->
    <div class="property-selector-modal" id="property-selector-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è</h3>
                <button class="close-modal-btn" onclick="closePropertySelector()">√ó</button>
            </div>
            
            <div class="modal-body">
                <div class="search-bar">
                    <input type="text" placeholder="–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤..." id="property-search">
                    <button class="search-btn">üîç</button>
                </div>
                
                <div class="properties-grid" id="properties-grid">
                    <!-- –û–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç –∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ AJAX -->
                </div>
            </div>
        </div>
    </div>

    <!-- 3D Viewer Modal -->
    <div class="viewer-modal" id="viewer-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="viewer-title">3D –ü—Ä–æ—Å–º–æ—Ç—Ä</h3>
                <button class="close-modal-btn" onclick="close3DViewer()">√ó</button>
            </div>
            <div class="modal-body">
                <div id="modal-3d-viewer" class="modal-3d-container"></div>
            </div>
        </div>
    </div>
</div>

<script>
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤
let comparisonList = JSON.parse(localStorage.getItem('comparisonList')) || [];
let modal3DViewer = null;

function openPropertySelector() {
    document.getElementById('property-selector-modal').classList.add('active');
    loadAvailableProperties();
}

function closePropertySelector() {
    document.getElementById('property-selector-modal').classList.remove('active');
}

function loadAvailableProperties() {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
    fetch('/Property/GetAvailableProperties')
        .then(response => response.json())
        .then(properties => {
            const grid = document.getElementById('properties-grid');
            grid.innerHTML = properties.map(property => `
                <div class="property-selector-item" onclick="addToComparison(${property.id})">
                    <div class="property-image">
                        <img src="${property.imagePath || '/images/no-image.svg'}" alt="${property.title}">
                    </div>
                    <div class="property-info">
                        <h4>${property.title}</h4>
                        <div class="property-price">${property.price.toLocaleString()} ‚ÇΩ</div>
                        <div class="property-specs">${property.area} –º¬≤ ‚Ä¢ ${property.rooms} –∫–æ–º–Ω.</div>
                    </div>
                </div>
            `).join('');
        })
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
        });
}

function addToComparison(propertyId) {
    if (comparisonList.length >= 3) {
        alert('–ú–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –æ–±—ä–µ–∫—Ç–∞');
        return;
    }
    
    if (!comparisonList.includes(propertyId)) {
        comparisonList.push(propertyId);
        localStorage.setItem('comparisonList', JSON.stringify(comparisonList));
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        window.location.href = `/Property/Compare?ids=${comparisonList.join(',')}`;
    }
    
    closePropertySelector();
}

function removeFromComparison(propertyId) {
    comparisonList = comparisonList.filter(id => id !== propertyId);
    localStorage.setItem('comparisonList', JSON.stringify(comparisonList));
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (comparisonList.length > 0) {
        window.location.href = `/Property/Compare?ids=${comparisonList.join(',')}`;
    } else {
        window.location.href = '/Property/Compare';
    }
}

function clearComparison() {
    if (confirm('–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è?')) {
        comparisonList = [];
        localStorage.removeItem('comparisonList');
        window.location.href = '/Property/Compare';
    }
}

function open3DViewer(propertyId) {
    const modal = document.getElementById('viewer-modal');
    modal.classList.add('active');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π 3D viewer –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    if (modal3DViewer) {
        modal3DViewer.dispose();
    }
    
    modal3DViewer = new RealEstate3DViewer('modal-3d-viewer');
    modal3DViewer.createDemoHouse();
    
    document.getElementById('viewer-title').textContent = `3D –ü—Ä–æ—Å–º–æ—Ç—Ä - –û–±—ä–µ–∫—Ç #${propertyId}`;
}

function close3DViewer() {
    document.getElementById('viewer-modal').classList.remove('active');
    if (modal3DViewer) {
        modal3DViewer.dispose();
        modal3DViewer = null;
    }
}

function toggleFavorite(propertyId) {
    const btn = event.target;
    btn.classList.toggle('active');
    
    if (btn.classList.contains('active')) {
        btn.textContent = 'üíñ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
    } else {
        btn.textContent = '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
    }
}

// –ü–æ–∏—Å–∫ –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('property-search');
    if (searchInput) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            const items = document.querySelectorAll('.property-selector-item');
            
            items.forEach(item => {
                const title = item.querySelector('h4').textContent.toLowerCase();
                if (title.includes(searchTerm)) {
                    item.style.display = 'block';
                } else {
                    item.style.display = 'none';
                }
            });
        });
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏—Ö
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('property-selector-modal') || e.target.classList.contains('viewer-modal')) {
        e.target.classList.remove('active');
        if (modal3DViewer) {
            modal3DViewer.dispose();
            modal3DViewer = null;
        }
    }
});
</script>