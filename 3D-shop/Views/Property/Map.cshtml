@model List<RealEstate3D.Models.Property>
@{
    ViewData["Title"] = "–ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏";
}

<div class="map-page">
    <div class="page-header">
        <div class="container">
            <div class="header-content">
                <h1>üó∫Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</h1>
                <p>–ù–∞–π–¥–∏—Ç–µ –∏–¥–µ–∞–ª—å–Ω—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ –ú–æ—Å–∫–≤—ã</p>
                
                <div class="quick-stats">
                    <div class="stat-item">
                        <div class="stat-number">@Model.Count</div>
                        <div class="stat-label">–û–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@Model.Where(p => p.Price < 10000000).Count()</div>
                        <div class="stat-label">–î–æ 10 –º–ª–Ω ‚ÇΩ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@Model.DistinctBy(p => p.Location).Count()</div>
                        <div class="stat-label">–†–∞–π–æ–Ω–æ–≤</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@((int)(Model.Average(p => (double)p.Price / p.Area)))</div>
                        <div class="stat-label">‚ÇΩ/–º¬≤ –≤ —Å—Ä–µ–¥–Ω–µ–º</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="map-section">
            <div id="map-container"></div>
        </div>
        
        <div class="map-features">
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">üéØ</div>
                    <h3>–£–º–Ω—ã–π –ø–æ–∏—Å–∫</h3>
                    <p>–§–∏–ª—å—Ç—Ä—É–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –ø–æ —Ü–µ–Ω–µ, —Ç–∏–ø—É –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º –ø—Ä—è–º–æ –Ω–∞ –∫–∞—Ä—Ç–µ</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">üè†</div>
                    <h3>–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <p>–ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">üéÆ</div>
                    <h3>3D –ü—Ä–æ—Å–º–æ—Ç—Ä</h3>
                    <p>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ 3D —Ç—É—Ä—É –ø—Ä—è–º–æ —Å –∫–∞—Ä—Ç—ã –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ—Å–º–æ—Ç—Ä–∞</p>
                </div>
                
                <div class="feature-card">
                    <div class="feature-icon">üíæ</div>
                    <h3>–ò–∑–±—Ä–∞–Ω–Ω–æ–µ</h3>
                    <p>–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</p>
                </div>
            </div>
        </div>
        
        <div class="map-analytics">
            <h2>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä—ã–Ω–∫–∞</h2>
            
            <div class="analytics-grid">
                <div class="analytics-card">
                    <h4>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω–∞–º</h4>
                    <div class="price-chart">
                        @{
                            var priceRanges = new Dictionary<string, int>
                            {
                                ["–î–æ 5 –º–ª–Ω ‚ÇΩ"] = Model.Count(p => p.Price < 5000000),
                                ["5-10 –º–ª–Ω ‚ÇΩ"] = Model.Count(p => p.Price >= 5000000 && p.Price < 10000000),
                                ["10-20 –º–ª–Ω ‚ÇΩ"] = Model.Count(p => p.Price >= 10000000 && p.Price < 20000000),
                                ["–°–≤—ã—à–µ 20 –º–ª–Ω ‚ÇΩ"] = Model.Count(p => p.Price >= 20000000)
                            };
                        }
                        
                        @foreach(var range in priceRanges)
                        {
                            <div class="price-range-item">
                                <div class="range-label">@range.Key</div>
                                <div class="range-bar">
                                    <div class="range-fill" style="width: @(Math.Max(5, (double)range.Value / Model.Count * 100))%"></div>
                                </div>
                                <div class="range-count">@range.Value</div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="analytics-card">
                    <h4>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã</h4>
                    <div class="districts-list">
                        @{
                            var districts = Model.GroupBy(p => p.Location ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                                                .OrderByDescending(g => g.Count())
                                                .Take(5);
                        }
                        
                        @foreach(var district in districts)
                        {
                            <div class="district-item">
                                <div class="district-name">@district.Key</div>
                                <div class="district-stats">
                                    <span class="district-count">@district.Count() –æ–±—ä–µ–∫—Ç–æ–≤</span>
                                    <span class="district-price">–æ—Ç @district.Min(p => p.Price).ToString("N0") ‚ÇΩ</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                
                <div class="analytics-card">
                    <h4>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤</h4>
                    <div class="avg-price-display">
                        <div class="price-big">@((int)(Model.Average(p => (double)p.Price / p.Area))) ‚ÇΩ/–º¬≤</div>
                        <div class="price-trend">
                            <span class="trend-icon">üìà</span>
                            <span class="trend-text">+12% –∑–∞ –≥–æ–¥</span>
                        </div>
                    </div>
                    
                    <div class="price-breakdown">
                        <div class="breakdown-item">
                            <span class="breakdown-label">–ö–≤–∞—Ä—Ç–∏—Ä—ã</span>
                            <span class="breakdown-value">@((int)(Model.Where(p => p.PropertyType == "–ö–≤–∞—Ä—Ç–∏—Ä–∞").DefaultIfEmpty().Average(p => p != null ? (double)p.Price / p.Area : 0))) ‚ÇΩ/–º¬≤</span>
                        </div>
                        <div class="breakdown-item">
                            <span class="breakdown-label">–î–æ–º–∞</span>
                            <span class="breakdown-value">@((int)(Model.Where(p => p.PropertyType == "–î–æ–º").DefaultIfEmpty().Average(p => p != null ? (double)p.Price / p.Area : 0))) ‚ÇΩ/–º¬≤</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/interactive-map.js"></script>
    <script>
        // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ JavaScript
        const mapProperties = @Html.Raw(Json.Serialize(Model.Select(p => new {
            id = p.Id,
            title = p.Title,
            price = p.Price,
            area = p.Area,
            rooms = p.Rooms,
            propertyType = p.PropertyType,
            imagePath = p.ImagePath ?? "/images/no-image.svg"
        })));

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', function() {
            initInteractiveMap(mapProperties);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animate-in');
                    }
                });
            }, observerOptions);

            document.querySelectorAll('.analytics-card, .feature-card').forEach(card => {
                observer.observe(card);
            });
        });
    </script>
    
    <style>
        .animate-in {
            animation: slideInUp 0.6s ease-out forwards;
        }
        
        @@keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
}