@model PropertyViewModel
@{
    ViewData["Title"] = "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ";
}

<div class="page-header">
    <div class="container">
        <h1>üèòÔ∏è –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ</h1>
        <p>–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: @Model.TotalProperties</p>
    </div>
</div>

<div class="search-section">
    <div class="container">
        <form method="get" class="search-form">
            <div class="search-row">
                <div class="search-field">
                    <input type="text" name="search" value="@Model.SearchQuery" placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–¥—Ä–µ—Å—É..." />
                </div>
                <div class="search-field">
                    <select name="type">
                        <option value="">–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</option>
                        <option value="–ö–≤–∞—Ä—Ç–∏—Ä–∞" selected="@(Model.PropertyType == "–ö–≤–∞—Ä—Ç–∏—Ä–∞")">–ö–≤–∞—Ä—Ç–∏—Ä–∞</option>
                        <option value="–î–æ–º" selected="@(Model.PropertyType == "–î–æ–º")">–î–æ–º</option>
                        <option value="–ö–æ—Ç—Ç–µ–¥–∂" selected="@(Model.PropertyType == "–ö–æ—Ç—Ç–µ–¥–∂")">–ö–æ—Ç—Ç–µ–¥–∂</option>
                    </select>
                </div>
                <div class="search-field">
                    <input type="number" name="minPrice" value="@(Model.MinPrice > 0 ? Model.MinPrice : "")" placeholder="–¶–µ–Ω–∞ –æ—Ç (—Å–æ–º)" />
                </div>
                <div class="search-field">
                    <input type="number" name="maxPrice" value="@(Model.MaxPrice > 0 ? Model.MaxPrice : "")" placeholder="–¶–µ–Ω–∞ –¥–æ (—Å–æ–º)" />
                </div>
                <button type="submit" class="btn btn-primary">üîç –ù–∞–π—Ç–∏</button>
            </div>
        </form>
    </div>
</div>

<div class="properties-section">
    <div class="container">
        @if (Model.Properties.Any())
        {
            <div class="properties-grid">
                @foreach (var property in Model.Properties)
                {
                    <div class="property-card">
                        @{
                            var primaryImage = property.Images.FirstOrDefault(i => i.IsPrimary) ?? property.Images.FirstOrDefault();
                        }
                        @if (primaryImage != null)
                        {
                            <div class="property-image">
                                <img src="@primaryImage.ImageUrl" alt="@property.Title" />
                                <div class="property-badges-overlay">
                                    @if (property.Is3DGenerated)
                                    {
                                        <span class="badge badge-3d">üéØ 3D</span>
                                    }
                                    else
                                    {
                                        <span class="badge badge-processing">‚è≥</span>
                                    }
                                </div>
                            </div>
                        }
                        <div class="property-header">
                            <h3>@property.Title</h3>
                            <div class="property-badges">
                                <span class="badge badge-type">@property.PropertyType</span>
                            </div>
                        </div>
                        
                        <div class="property-info">
                            <div class="property-price">üí∞ @RealEstate3D.Helpers.CurrencyHelper.FormatKyrgyzCurrencyShort(property.Price)</div>
                            <div class="property-details">
                                <span>üìê @property.Area –º¬≤</span>
                                <span>üö™ @property.Rooms –∫–æ–º–Ω.</span>
                                @if (property.Floor > 0)
                                {
                                    <span>üè¢ @property.Floor/@property.TotalFloors —ç—Ç.</span>
                                }
                            </div>
                            <div class="property-address">üìç @property.Address</div>
                        </div>
                        
                        <div class="property-description">
                            <p>@property.Description</p>
                        </div>
                        
                        <div class="property-actions">
                            <a href="/Property/Details/@property.Id" class="btn btn-primary">–ü–æ–¥—Ä–æ–±–Ω–µ–µ</a>
                            @if (property.Is3DGenerated)
                            {
                                <button class="btn btn-outline" onclick="view3D(@property.Id)">üéÆ 3D —Ç—É—Ä</button>
                            }
                            else
                            {
                                <button class="btn btn-secondary" onclick="generate3D(@property.Id)">ü§ñ –°–æ–∑–¥–∞—Ç—å 3D</button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-results">
                <h3>üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ <a href="/Property/Upload">–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç</a></p>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function view3D(propertyId) {
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è 3D –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            alert('–û—Ç–∫—Ä—ã—Ç–∏–µ 3D –º–æ–¥–µ–ª–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #' + propertyId);
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 3D –¥–≤–∏–∂–∫–æ–º (Three.js, Babylon.js –∏ —Ç.–¥.)
        }
        
        function generate3D(propertyId) {
            if (confirm('–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 3D –º–æ–¥–µ–ª–∏? –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –º–∏–Ω—É—Ç—ã.')) {
                fetch('/Property/Generate3D', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ propertyId: propertyId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(data.message);
                        location.reload();
                    } else {
                        alert('–û—à–∏–±–∫–∞: ' + data.message);
                    }
                });
            }
        }
    </script>
}