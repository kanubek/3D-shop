class InteractiveMapManager {
    constructor(containerId, properties = []) {
        this.container = document.getElementById(containerId);
        this.properties = properties;
        this.map = null;
        this.markers = [];
        this.selectedProperty = null;
        this.clusterer = null;
        
        this.init();
    }

    async init() {
        // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞—Ä—Ç—ã
        this.createMapInterface();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º Leaflet –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É Google Maps)
        await this.loadLeafletLibrary();
        this.initializeMap();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç—É
        this.addPropertiesToMap();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
    }

    createMapInterface() {
        const mapHTML = `
            <div class="map-container">
                <div class="map-controls">
                    <div class="control-group">
                        <h4>üó∫Ô∏è –ö–∞—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤</h4>
                        <div class="map-stats">
                            <span class="stats-item">üìç –û–±—ä–µ–∫—Ç–æ–≤: <span id="properties-count">${this.properties.length}</span></span>
                            <span class="stats-item">üéØ –í—ã–±—Ä–∞–Ω–æ: <span id="selected-count">0</span></span>
                        </div>
                    </div>
                    
                    <div class="filter-controls">
                        <select id="price-filter" class="filter-select">
                            <option value="">–í—Å–µ —Ü–µ–Ω—ã</option>
                            <option value="0-5000000">–î–æ 5 –º–ª–Ω ‚ÇΩ</option>
                            <option value="5000000-10000000">5-10 –º–ª–Ω ‚ÇΩ</option>
                            <option value="10000000-20000000">10-20 –º–ª–Ω ‚ÇΩ</option>
                            <option value="20000000-999999999">–°–≤—ã—à–µ 20 –º–ª–Ω ‚ÇΩ</option>
                        </select>
                        
                        <select id="type-filter" class="filter-select">
                            <option value="">–í—Å–µ —Ç–∏–ø—ã</option>
                            <option value="–ö–≤–∞—Ä—Ç–∏—Ä–∞">–ö–≤–∞—Ä—Ç–∏—Ä—ã</option>
                            <option value="–î–æ–º">–î–æ–º–∞</option>
                            <option value="–ö–æ—Ç—Ç–µ–¥–∂">–ö–æ—Ç—Ç–µ–¥–∂–∏</option>
                        </select>
                        
                        <button class="reset-filters-btn" onclick="resetMapFilters()">
                            üîÑ –°–±—Ä–æ—Å–∏—Ç—å
                        </button>
                    </div>
                    
                    <div class="map-view-controls">
                        <button class="view-btn active" data-view="map" onclick="switchMapView('map')">
                            üó∫Ô∏è –ö–∞—Ä—Ç–∞
                        </button>
                        <button class="view-btn" data-view="satellite" onclick="switchMapView('satellite')">
                            üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫
                        </button>
                        <button class="view-btn" data-view="hybrid" onclick="switchMapView('hybrid')">
                            üîó –ì–∏–±—Ä–∏–¥
                        </button>
                    </div>
                </div>
                
                <div id="interactive-map" class="interactive-map"></div>
                
                <div class="map-legend">
                    <div class="legend-item">
                        <div class="legend-marker available"></div>
                        <span>–î–æ—Å—Ç—É–ø–Ω–æ</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-marker sold"></div>
                        <span>–ü—Ä–æ–¥–∞–Ω–æ</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-marker reserved"></div>
                        <span>–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-marker premium"></div>
                        <span>–ü—Ä–µ–º–∏—É–º</span>
                    </div>
                </div>
                
                <div class="property-popup" id="property-popup" style="display: none;">
                    <div class="popup-content">
                        <button class="popup-close" onclick="closePropertyPopup()">√ó</button>
                        <div class="popup-image">
                            <img id="popup-image" src="" alt="">
                            <div class="popup-badge" id="popup-badge"></div>
                        </div>
                        <div class="popup-details">
                            <h4 id="popup-title"></h4>
                            <div class="popup-price" id="popup-price"></div>
                            <div class="popup-specs">
                                <span id="popup-area"></span>
                                <span id="popup-rooms"></span>
                            </div>
                            <div class="popup-actions">
                                <button class="popup-btn primary" onclick="viewPropertyDetails()">
                                    üëÅÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                </button>
                                <button class="popup-btn secondary" onclick="add3DView()">
                                    üéØ 3D –ü—Ä–æ—Å–º–æ—Ç—Ä
                                </button>
                                <button class="popup-btn favorite" onclick="togglePropertyFavorite()">
                                    ‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        `;

        this.container.innerHTML = mapHTML;
    }

    async loadLeafletLibrary() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º Leaflet CSS –∏ JS –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if (!window.L) {
            return new Promise((resolve) => {
                // CSS
                const cssLink = document.createElement('link');
                cssLink.rel = 'stylesheet';
                cssLink.href = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.css';
                document.head.appendChild(cssLink);

                // JS
                const script = document.createElement('script');
                script.src = 'https://unpkg.com/leaflet@1.9.4/dist/leaflet.js';
                script.onload = resolve;
                document.head.appendChild(script);
            });
        }
    }

    initializeMap() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É Leaflet
        initMap() {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å —Ü–µ–Ω—Ç—Ä–æ–º –≤ –ë–∏—à–∫–µ–∫–µ
        this.map = L.map('interactive-map').setView([42.8746, 74.5698], 11); // –ú–æ—Å–∫–≤–∞

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–ª—ã OpenStreetMap
        this.mapLayers = {
            map: L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '¬© OpenStreetMap contributors'
            }),
            satellite: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                attribution: '¬© Esri'
            }),
            hybrid: L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                attribution: '¬© Esri'
            })
        };

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–ª–æ–π
        this.mapLayers.map.addTo(this.map);
        this.currentLayer = 'map';

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
        this.map.addControl(L.control.zoom({ position: 'bottomright' }));
        this.map.addControl(L.control.scale({ position: 'bottomleft' }));
    }

    addPropertiesToMap() {
        this.properties.forEach((property, index) => {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–µ–º–æ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–Ω–∏ –±—É–¥—É—Ç –∏–∑ –±–∞–∑—ã)
            const lat = 55.7558 + (Math.random() - 0.5) * 0.2;
            const lng = 37.6176 + (Math.random() - 0.5) * 0.3;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞
            const status = this.getPropertyStatus(property);
            
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É
            const icon = this.createPropertyIcon(status, property.price);

            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä
            const marker = L.marker([lat, lng], { icon })
                .bindPopup(this.createPopupContent(property))
                .on('click', () => this.selectProperty(property));

            marker.propertyData = property;
            this.markers.push(marker);
            marker.addTo(this.map);
        });

        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–∞—Ä–∫–µ—Ä—ã, –ø–æ–¥–≥–æ–Ω—è–µ–º –≤–∏–¥ –∫–∞—Ä—Ç—ã
        if (this.markers.length > 0) {
            const group = new L.featureGroup(this.markers);
            this.map.fitBounds(group.getBounds().pad(0.1));
        }
    }

    getPropertyStatus(property) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ ID (–¥–ª—è –¥–µ–º–æ)
        if (property.id % 10 === 0) return 'sold';
        if (property.id % 7 === 0) return 'reserved';
        if (property.price > 15000000) return 'premium';
        return 'available';
    }

    createPropertyIcon(status, price) {
        const colors = {
            available: '#10b981',
            sold: '#ef4444', 
            reserved: '#f59e0b',
            premium: '#8b5cf6'
        };

        const priceText = price > 999999 ? `${Math.round(price/1000000)}M` : `${Math.round(price/1000)}K`;

        const iconHtml = `
            <div class="property-marker ${status}">
                <div class="marker-price">${priceText}</div>
                <div class="marker-point"></div>
            </div>
        `;

        return L.divIcon({
            html: iconHtml,
            className: 'custom-property-icon',
            iconSize: [50, 60],
            iconAnchor: [25, 60],
            popupAnchor: [0, -60]
        });
    }

    createPopupContent(property) {
        return `
            <div class="map-popup-content">
                <h4>${property.title}</h4>
                <div class="popup-price">${property.price.toLocaleString()} ‚ÇΩ</div>
                <div class="popup-details">
                    <span>${property.area} –º¬≤</span> ‚Ä¢ 
                    <span>${property.rooms} –∫–æ–º–Ω.</span>
                </div>
                <button onclick="openPropertyDetails(${property.id})" class="popup-detail-btn">
                    –ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí
                </button>
            </div>
        `;
    }

    selectProperty(property) {
        this.selectedProperty = property;
        this.showPropertyPopup(property);
        this.updateSelectedCount();
    }

    showPropertyPopup(property) {
        const popup = document.getElementById('property-popup');
        
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        document.getElementById('popup-title').textContent = property.title;
        document.getElementById('popup-price').textContent = `${property.price.toLocaleString()} ‚ÇΩ`;
        document.getElementById('popup-area').textContent = `${property.area} –º¬≤`;
        document.getElementById('popup-rooms').textContent = `${property.rooms} –∫–æ–º–Ω.`;
        
        const image = document.getElementById('popup-image');
        image.src = property.imagePath || '/images/no-image.svg';
        
        const badge = document.getElementById('popup-badge');
        const status = this.getPropertyStatus(property);
        badge.textContent = this.getStatusText(status);
        badge.className = `popup-badge ${status}`;

        popup.style.display = 'block';
        setTimeout(() => popup.classList.add('show'), 100);
    }

    getStatusText(status) {
        const texts = {
            available: '–î–æ—Å—Ç—É–ø–Ω–æ',
            sold: '–ü—Ä–æ–¥–∞–Ω–æ',
            reserved: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            premium: '–ü—Ä–µ–º–∏—É–º'
        };
        return texts[status] || '–î–æ—Å—Ç—É–ø–Ω–æ';
    }

    setupEventListeners() {
        // –§–∏–ª—å—Ç—Ä—ã
        document.getElementById('price-filter').addEventListener('change', () => this.applyFilters());
        document.getElementById('type-filter').addEventListener('change', () => this.applyFilters());

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–ø–∞–ø–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', (e) => {
            const popup = document.getElementById('property-popup');
            if (!popup.contains(e.target) && !e.target.closest('.leaflet-marker-icon')) {
                this.closePropertyPopup();
            }
        });
    }

    applyFilters() {
        const priceFilter = document.getElementById('price-filter').value;
        const typeFilter = document.getElementById('type-filter').value;
        
        let visibleCount = 0;

        this.markers.forEach(marker => {
            const property = marker.propertyData;
            let visible = true;

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if (priceFilter) {
                const [min, max] = priceFilter.split('-').map(Number);
                visible = visible && (property.price >= min && property.price <= max);
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
            if (typeFilter) {
                visible = visible && (property.propertyType === typeFilter);
            }

            if (visible) {
                marker.addTo(this.map);
                visibleCount++;
            } else {
                this.map.removeLayer(marker);
            }
        });

        document.getElementById('properties-count').textContent = visibleCount;
    }

    switchMapView(viewType) {
        // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–ª–æ–π
        this.map.removeLayer(this.mapLayers[this.currentLayer]);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–π
        this.mapLayers[viewType].addTo(this.map);
        this.currentLayer = viewType;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.view-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-view="${viewType}"]`).classList.add('active');
    }

    resetFilters() {
        document.getElementById('price-filter').value = '';
        document.getElementById('type-filter').value = '';
        this.applyFilters();
    }

    closePropertyPopup() {
        const popup = document.getElementById('property-popup');
        popup.classList.remove('show');
        setTimeout(() => {
            popup.style.display = 'none';
        }, 300);
    }

    updateSelectedCount() {
        const count = this.selectedProperty ? 1 : 0;
        document.getElementById('selected-count').textContent = count;
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    static instance = null;

    static getInstance() {
        return InteractiveMapManager.instance;
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function initInteractiveMap(properties) {
    InteractiveMapManager.instance = new InteractiveMapManager('map-container', properties);
}

function switchMapView(viewType) {
    const mapManager = InteractiveMapManager.getInstance();
    if (mapManager) {
        mapManager.switchMapView(viewType);
    }
}

function resetMapFilters() {
    const mapManager = InteractiveMapManager.getInstance();
    if (mapManager) {
        mapManager.resetFilters();
    }
}

function closePropertyPopup() {
    const mapManager = InteractiveMapManager.getInstance();
    if (mapManager) {
        mapManager.closePropertyPopup();
    }
}

function openPropertyDetails(propertyId) {
    window.open(`/Property/Details/${propertyId}`, '_blank');
}

function viewPropertyDetails() {
    const mapManager = InteractiveMapManager.getInstance();
    if (mapManager && mapManager.selectedProperty) {
        window.open(`/Property/Details/${mapManager.selectedProperty.id}`, '_blank');
    }
}

function add3DView() {
    const mapManager = InteractiveMapManager.getInstance();
    if (mapManager && mapManager.selectedProperty) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º 3D –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        window.open(`/Property/Details/${mapManager.selectedProperty.id}#3d-view`, '_blank');
    }
}

function togglePropertyFavorite() {
    const mapManager = InteractiveMapManager.getInstance();
    if (mapManager && mapManager.selectedProperty) {
        // –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        console.log('Toggle favorite for property:', mapManager.selectedProperty.id);
        
        // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        const btn = event.target;
        if (btn.textContent.includes('‚ù§Ô∏è')) {
            btn.textContent = 'üíñ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º';
            btn.classList.add('favorited');
        } else {
            btn.textContent = '‚ù§Ô∏è –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            btn.classList.remove('favorited');
        }
    }
}