class VirtualFurnitureManager {
    constructor(viewer3D) {
        this.viewer = viewer3D;
        this.furniture = [];
        this.selectedFurniture = null;
        this.furnitureLibrary = this.initFurnitureLibrary();
        this.isPlacementMode = false;
        this.currentCategory = 'living';
        
        this.init();
    }

    init() {
        this.createFurnitureUI();
        this.setupEventListeners();
    }

    initFurnitureLibrary() {
        return {
            living: [
                { id: 'sofa', name: '–î–∏–≤–∞–Ω', icon: 'üõãÔ∏è', color: 0x4a5568, size: [2, 0.8, 0.8] },
                { id: 'armchair', name: '–ö—Ä–µ—Å–ª–æ', icon: 'ü™ë', color: 0x2d3748, size: [0.8, 0.8, 0.8] },
                { id: 'coffee_table', name: '–ñ—É—Ä–Ω–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–∏–∫', icon: 'üü´', color: 0x8b4513, size: [1.2, 0.4, 0.8] },
                { id: 'tv_stand', name: '–¢–í —Ç—É–º–±–∞', icon: 'üì∫', color: 0x1a202c, size: [1.6, 0.5, 0.4] },
                { id: 'bookshelf', name: '–ö–Ω–∏–∂–Ω–∞—è –ø–æ–ª–∫–∞', icon: 'üìö', color: 0x8b4513, size: [0.8, 2, 0.3] }
            ],
            bedroom: [
                { id: 'bed', name: '–ö—Ä–æ–≤–∞—Ç—å', icon: 'üõèÔ∏è', color: 0x4a5568, size: [2, 0.6, 1.5] },
                { id: 'wardrobe', name: '–®–∫–∞—Ñ', icon: 'üëó', color: 0x2d3748, size: [1.2, 2.2, 0.6] },
                { id: 'nightstand', name: '–¢—É–º–±–æ—á–∫–∞', icon: 'üïØÔ∏è', color: 0x8b4513, size: [0.5, 0.6, 0.4] },
                { id: 'dresser', name: '–ö–æ–º–æ–¥', icon: 'üóÉÔ∏è', color: 0x8b4513, size: [1.2, 0.8, 0.5] },
                { id: 'mirror', name: '–ó–µ—Ä–∫–∞–ª–æ', icon: 'ü™û', color: 0xc0c0c0, size: [0.05, 1.8, 0.8] }
            ],
            kitchen: [
                { id: 'dining_table', name: '–û–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª', icon: 'üçΩÔ∏è', color: 0x8b4513, size: [1.4, 0.75, 0.8] },
                { id: 'chair', name: '–°—Ç—É–ª', icon: 'ü™ë', color: 0x4a5568, size: [0.5, 0.9, 0.5] },
                { id: 'refrigerator', name: '–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫', icon: '‚ùÑÔ∏è', color: 0xf8f8ff, size: [0.6, 1.8, 0.6] },
                { id: 'kitchen_island', name: '–ö—É—Ö–æ–Ω–Ω—ã–π –æ—Å—Ç—Ä–æ–≤', icon: 'üèùÔ∏è', color: 0x8b4513, size: [2, 0.9, 1] },
                { id: 'cabinet', name: '–®–∫–∞—Ñ—á–∏–∫', icon: 'üóÑÔ∏è', color: 0x4a5568, size: [0.8, 0.9, 0.4] }
            ],
            office: [
                { id: 'desk', name: '–ü–∏—Å—å–º–µ–Ω–Ω—ã–π —Å—Ç–æ–ª', icon: 'üñ•Ô∏è', color: 0x8b4513, size: [1.4, 0.75, 0.7] },
                { id: 'office_chair', name: '–û—Ñ–∏—Å–Ω–æ–µ –∫—Ä–µ—Å–ª–æ', icon: 'üí∫', color: 0x1a202c, size: [0.6, 1.2, 0.6] },
                { id: 'file_cabinet', name: '–ö–∞—Ä—Ç–æ—Ç–µ–∫–∞', icon: 'üìÅ', color: 0x4a5568, size: [0.4, 1.3, 0.6] },
                { id: 'bookcase', name: '–°—Ç–µ–ª–ª–∞–∂', icon: 'üìñ', color: 0x8b4513, size: [0.8, 2, 0.3] },
                { id: 'safe', name: '–°–µ–π—Ñ', icon: 'üîí', color: 0x2d3748, size: [0.4, 0.6, 0.4] }
            ]
        };
    }

    createFurnitureUI() {
        const furnitureHTML = `
            <div class="furniture-panel" id="furniture-panel">
                <div class="furniture-header">
                    <h4>ü™ë –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –º–µ–±–µ–ª—å</h4>
                    <button class="close-btn" onclick="toggleFurniturePanel()">√ó</button>
                </div>
                
                <div class="furniture-categories">
                    <button class="category-btn active" data-category="living">üõãÔ∏è –ì–æ—Å—Ç–∏–Ω–∞—è</button>
                    <button class="category-btn" data-category="bedroom">üõèÔ∏è –°–ø–∞–ª—å–Ω—è</button>
                    <button class="category-btn" data-category="kitchen">üçΩÔ∏è –ö—É—Ö–Ω—è</button>
                    <button class="category-btn" data-category="office">üíº –û—Ñ–∏—Å</button>
                </div>
                
                <div class="furniture-grid" id="furniture-grid">
                    <!-- –ú–µ–±–µ–ª—å –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
                
                <div class="furniture-controls">
                    <button class="control-btn" onclick="clearAllFurniture()">
                        üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                    </button>
                    <button class="control-btn" onclick="saveFurnitureLayout()">
                        üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </button>
                    <button class="control-btn" onclick="loadFurnitureLayout()">
                        üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å
                    </button>
                </div>
                
                <div class="placement-help" id="placement-help" style="display: none;">
                    <div class="help-text">
                        <strong>–†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∞–∫—Ç–∏–≤–µ–Ω</strong><br>
                        –ö–ª–∏–∫–Ω–∏—Ç–µ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–µ–±–µ–ª–∏
                    </div>
                    <button class="cancel-placement" onclick="cancelPlacement()">–û—Ç–º–µ–Ω–∞</button>
                </div>
            </div>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –º–µ–±–µ–ª–∏
        const toggleButton = `
            <button class="furniture-toggle-btn" onclick="toggleFurniturePanel()">
                ü™ë –ú–µ–±–µ–ª—å
            </button>
        `;

        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 3D
        const controlsContainer = document.querySelector('.viewer-controls');
        if (controlsContainer) {
            controlsContainer.insertAdjacentHTML('beforeend', toggleButton);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å –º–µ–±–µ–ª–∏ –≤ –¥–æ–∫—É–º–µ–Ω—Ç
        document.body.insertAdjacentHTML('beforeend', furnitureHTML);

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–±–µ–ª—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.loadFurnitureCategory('living');
    }

    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        document.addEventListener('click', (e) => {
            if (e.target.classList.contains('category-btn')) {
                const category = e.target.dataset.category;
                this.switchCategory(category);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤ 3D –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
        this.viewer.container.addEventListener('click', (event) => {
            if (this.isPlacementMode && this.selectedFurniture) {
                this.placeFurniture(event);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–±–µ–ª—å—é
        document.addEventListener('keydown', (e) => {
            if (this.selectedFurnitureItem) {
                switch (e.key) {
                    case 'Delete':
                        this.removeFurniture(this.selectedFurnitureItem);
                        break;
                    case 'r':
                    case 'R':
                        this.rotateFurniture(this.selectedFurnitureItem);
                        break;
                }
            }
        });
    }

    switchCategory(category) {
        this.currentCategory = category;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        document.querySelectorAll('.category-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.querySelector(`[data-category="${category}"]`).classList.add('active');

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–±–µ–ª—å –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.loadFurnitureCategory(category);
    }

    loadFurnitureCategory(category) {
        const grid = document.getElementById('furniture-grid');
        const items = this.furnitureLibrary[category];

        grid.innerHTML = items.map(item => `
            <div class="furniture-item" data-furniture-id="${item.id}" onclick="selectFurnitureForPlacement('${item.id}')">
                <div class="furniture-icon">${item.icon}</div>
                <div class="furniture-name">${item.name}</div>
            </div>
        `).join('');
    }

    selectFurnitureForPlacement(furnitureId) {
        const furnitureData = this.getFurnitureData(furnitureId);
        if (!furnitureData) return;

        this.selectedFurniture = furnitureData;
        this.isPlacementMode = true;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å –ø–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—é
        document.getElementById('placement-help').style.display = 'block';

        // –ò–∑–º–µ–Ω—è–µ–º –∫—É—Ä—Å–æ—Ä
        this.viewer.container.style.cursor = 'crosshair';

        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–µ–±–µ–ª—å
        document.querySelectorAll('.furniture-item').forEach(item => {
            item.classList.remove('selected');
        });
        document.querySelector(`[data-furniture-id="${furnitureId}"]`).classList.add('selected');
    }

    placeFurniture(event) {
        if (!this.isPlacementMode || !this.selectedFurniture) return;

        const rect = this.viewer.container.getBoundingClientRect();
        const mouse = new THREE.Vector2(
            ((event.clientX - rect.left) / rect.width) * 2 - 1,
            -((event.clientY - rect.top) / rect.height) * 2 + 1
        );

        const raycaster = new THREE.Raycaster();
        raycaster.setFromCamera(mouse, this.viewer.camera);
        
        // –ò—â–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –ø–æ–ª–æ–º
        const groundIntersects = raycaster.intersectObjects(this.viewer.scene.children, true);
        const floorIntersect = groundIntersects.find(intersect => 
            intersect.object.name === 'floor' || intersect.point.y < 0.5
        );

        if (floorIntersect) {
            const furniture = this.createFurnitureMesh(this.selectedFurniture);
            furniture.position.copy(floorIntersect.point);
            furniture.position.y = this.selectedFurniture.size[1] / 2; // –°—Ç–∞–≤–∏–º –Ω–∞ –ø–æ–ª

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ü–µ–Ω—É –∏ –≤ —Å–ø–∏—Å–æ–∫
            this.viewer.scene.add(furniture);
            this.furniture.push({
                id: Date.now(),
                type: this.selectedFurniture.id,
                mesh: furniture,
                data: this.selectedFurniture
            });

            // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
            this.cancelPlacement();

            this.viewer.showInfo(`${this.selectedFurniture.name} –¥–æ–±–∞–≤–ª–µ–Ω–∞! –ù–∞–∂–º–∏—Ç–µ R –¥–ª—è –ø–æ–≤–æ—Ä–æ—Ç–∞, Delete –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.`);
        }
    }

    createFurnitureMesh(furnitureData) {
        const [width, height, depth] = furnitureData.size;
        const geometry = new THREE.BoxGeometry(width, height, depth);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å —Ü–≤–µ—Ç–æ–º –∏ –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        const material = new THREE.MeshLambertMaterial({ 
            color: furnitureData.color,
            transparent: true,
            opacity: 0.8
        });

        const mesh = new THREE.Mesh(geometry, material);
        mesh.castShadow = true;
        mesh.receiveShadow = true;
        mesh.name = `furniture_${furnitureData.id}`;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–≤–æ–¥–∫—É
        const edges = new THREE.EdgesGeometry(geometry);
        const lineMaterial = new THREE.LineBasicMaterial({ color: 0x000000, opacity: 0.3 });
        const wireframe = new THREE.LineSegments(edges, lineMaterial);
        mesh.add(wireframe);

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É
        this.addFurnitureLabel(mesh, furnitureData.name);

        // –î–µ–ª–∞–µ–º –º–µ–±–µ–ª—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π
        mesh.userData = { furnitureData, manager: this };
        mesh.addEventListener = this.setupFurnitureInteraction.bind(this, mesh);

        return mesh;
    }

    addFurnitureLabel(mesh, name) {
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É
        const canvas = document.createElement('canvas');
        const context = canvas.getContext('2d');
        canvas.width = 256;
        canvas.height = 64;
        
        context.fillStyle = 'rgba(0,0,0,0.7)';
        context.fillRect(0, 0, canvas.width, canvas.height);
        
        context.fillStyle = 'white';
        context.font = '20px Arial';
        context.textAlign = 'center';
        context.fillText(name, canvas.width / 2, canvas.height / 2 + 7);

        const texture = new THREE.CanvasTexture(canvas);
        const spriteMaterial = new THREE.SpriteMaterial({ map: texture });
        const sprite = new THREE.Sprite(spriteMaterial);
        
        sprite.scale.set(1, 0.25, 1);
        sprite.position.y = mesh.geometry.parameters.height / 2 + 0.5;
        
        mesh.add(sprite);
    }

    setupFurnitureInteraction(mesh) {
        mesh.addEventListener('click', () => {
            this.selectFurnitureItem(mesh);
        });
    }

    selectFurnitureItem(mesh) {
        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (this.selectedFurnitureItem) {
            this.selectedFurnitureItem.material.emissive = new THREE.Color(0x000000);
        }

        // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç
        this.selectedFurnitureItem = mesh;
        mesh.material.emissive = new THREE.Color(0x444444);

        this.viewer.showInfo('–ú–µ–±–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞! R - –ø–æ–≤–µ—Ä–Ω—É—Ç—å, Delete - —É–¥–∞–ª–∏—Ç—å');
    }

    rotateFurniture(mesh) {
        if (mesh) {
            mesh.rotation.y += Math.PI / 2;
            this.viewer.showInfo('–ú–µ–±–µ–ª—å –ø–æ–≤–µ—Ä–Ω—É—Ç–∞!');
        }
    }

    removeFurniture(mesh) {
        if (mesh) {
            this.viewer.scene.remove(mesh);
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞
            this.furniture = this.furniture.filter(item => item.mesh !== mesh);
            
            // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            this.selectedFurnitureItem = null;
            
            this.viewer.showInfo('–ú–µ–±–µ–ª—å —É–¥–∞–ª–µ–Ω–∞!');
        }
    }

    cancelPlacement() {
        this.isPlacementMode = false;
        this.selectedFurniture = null;
        
        document.getElementById('placement-help').style.display = 'none';
        this.viewer.container.style.cursor = 'default';

        // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –º–µ–±–µ–ª–∏
        document.querySelectorAll('.furniture-item').forEach(item => {
            item.classList.remove('selected');
        });
    }

    clearAllFurniture() {
        if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å—é –º–µ–±–µ–ª—å?')) {
            this.furniture.forEach(item => {
                this.viewer.scene.remove(item.mesh);
            });
            
            this.furniture = [];
            this.selectedFurnitureItem = null;
            
            this.viewer.showSuccess('–í—Å—è –º–µ–±–µ–ª—å —É–¥–∞–ª–µ–Ω–∞!');
        }
    }

    saveFurnitureLayout() {
        const layout = this.furniture.map(item => ({
            type: item.type,
            position: item.mesh.position.toArray(),
            rotation: item.mesh.rotation.toArray()
        }));

        localStorage.setItem('furniture_layout', JSON.stringify(layout));
        this.viewer.showSuccess('–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–±–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
    }

    loadFurnitureLayout() {
        const saved = localStorage.getItem('furniture_layout');
        if (saved) {
            const layout = JSON.parse(saved);
            
            // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –º–µ–±–µ–ª—å
            this.clearAllFurniture();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é
            layout.forEach(item => {
                const furnitureData = this.getFurnitureData(item.type);
                if (furnitureData) {
                    const mesh = this.createFurnitureMesh(furnitureData);
                    mesh.position.fromArray(item.position);
                    mesh.rotation.fromArray(item.rotation);
                    
                    this.viewer.scene.add(mesh);
                    this.furniture.push({
                        id: Date.now(),
                        type: item.type,
                        mesh: mesh,
                        data: furnitureData
                    });
                }
            });

            this.viewer.showSuccess('–†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–±–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        } else {
            this.viewer.showInfo('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–µ–±–µ–ª–∏.');
        }
    }

    getFurnitureData(id) {
        for (const category of Object.values(this.furnitureLibrary)) {
            const item = category.find(furniture => furniture.id === id);
            if (item) return item;
        }
        return null;
    }

    togglePanel() {
        const panel = document.getElementById('furniture-panel');
        panel.classList.toggle('open');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
let furnitureManager = null;

function initFurnitureManager() {
    if (viewer3D && !furnitureManager) {
        furnitureManager = new VirtualFurnitureManager(viewer3D);
    }
}

function toggleFurniturePanel() {
    if (!furnitureManager) {
        initFurnitureManager();
    }
    if (furnitureManager) {
        furnitureManager.togglePanel();
    }
}

function selectFurnitureForPlacement(furnitureId) {
    if (furnitureManager) {
        furnitureManager.selectFurnitureForPlacement(furnitureId);
    }
}

function cancelPlacement() {
    if (furnitureManager) {
        furnitureManager.cancelPlacement();
    }
}

function clearAllFurniture() {
    if (furnitureManager) {
        furnitureManager.clearAllFurniture();
    }
}

function saveFurnitureLayout() {
    if (furnitureManager) {
        furnitureManager.saveFurnitureLayout();
    }
}

function loadFurnitureLayout() {
    if (furnitureManager) {
        furnitureManager.loadFurnitureLayout();
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ 3D –≤—å—é–≤–µ—Ä–∞
    setTimeout(() => {
        if (viewer3D) {
            initFurnitureManager();
        }
    }, 2000);
});