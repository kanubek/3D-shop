class NotificationSystem {
    constructor() {
        this.notifications = [];
        this.favorites = this.loadFavorites();
        this.subscriptions = this.loadSubscriptions();
        
        this.init();
    }

    init() {
        this.createNotificationInterface();
        this.createFavoritesInterface();
        this.setupEventListeners();
        this.checkForUpdates();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        setInterval(() => this.checkForUpdates(), 30000);
    }

    createNotificationInterface() {
        const notificationHTML = `
            <!-- –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
            <div class="notification-bell" id="notification-bell">
                <div class="bell-icon">üîî</div>
                <div class="notification-badge" id="notification-badge" style="display: none;">0</div>
            </div>

            <!-- –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
            <div class="notifications-panel" id="notifications-panel">
                <div class="notifications-header">
                    <h3>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                    <div class="notification-actions">
                        <button class="mark-all-read-btn" onclick="markAllAsRead()">
                            ‚úì –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏
                        </button>
                        <button class="close-notifications-btn" onclick="closeNotifications()">√ó</button>
                    </div>
                </div>
                
                <div class="notifications-tabs">
                    <button class="notification-tab active" data-tab="all">–í—Å–µ</button>
                    <button class="notification-tab" data-tab="properties">–û–±—ä–µ–∫—Ç—ã</button>
                    <button class="notification-tab" data-tab="system">–°–∏—Å—Ç–µ–º–∞</button>
                </div>

                <div class="notifications-list" id="notifications-list">
                    <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>

                <div class="notification-settings">
                    <h4>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h4>
                    <div class="setting-item">
                        <label class="setting-checkbox">
                            <input type="checkbox" id="notify-price-changes" checked>
                            <span class="checkmark"></span>
                            –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                        </label>
                    </div>
                    <div class="setting-item">
                        <label class="setting-checkbox">
                            <input type="checkbox" id="notify-new-properties" checked>
                            <span class="checkmark"></span>
                            –ù–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ä–∞–π–æ–Ω–∞—Ö
                        </label>
                    </div>
                    <div class="setting-item">
                        <label class="setting-checkbox">
                            <input type="checkbox" id="notify-reviews" checked>
                            <span class="checkmark"></span>
                            –ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
                        </label>
                    </div>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', notificationHTML);
    }

    createFavoritesInterface() {
        const favoritesHTML = `
            <!-- –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ -->
            <div class="favorites-button" id="favorites-button">
                <div class="favorites-icon">‚ù§Ô∏è</div>
                <div class="favorites-count" id="favorites-count">${this.favorites.length}</div>
            </div>

            <!-- –ü–∞–Ω–µ–ª—å –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ -->
            <div class="favorites-panel" id="favorites-panel">
                <div class="favorites-header">
                    <h3>‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ</h3>
                    <div class="favorites-actions">
                        <button class="compare-favorites-btn" onclick="compareAllFavorites()">
                            ‚öñÔ∏è –°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ
                        </button>
                        <button class="close-favorites-btn" onclick="closeFavorites()">√ó</button>
                    </div>
                </div>

                <div class="favorites-filters">
                    <select class="favorites-sort" id="favorites-sort">
                        <option value="date-desc">–°–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ</option>
                        <option value="date-asc">–°–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ä—ã–µ</option>
                        <option value="price-asc">–ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Ü–µ–Ω—ã</option>
                        <option value="price-desc">–ü–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã</option>
                        <option value="area-asc">–ü–æ –ø–ª–æ—â–∞–¥–∏ (–º–µ–Ω—å—à–µ)</option>
                        <option value="area-desc">–ü–æ –ø–ª–æ—â–∞–¥–∏ (–±–æ–ª—å—à–µ)</option>
                    </select>
                </div>

                <div class="favorites-list" id="favorites-list">
                    <!-- –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                </div>
            </div>

            <!-- –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ä–µ–∫—Ç–∞ -->
            <div class="add-to-favorites" id="add-to-favorites" style="display: none;">
                <button class="favorite-btn" onclick="toggleFavorite()">
                    <span class="favorite-icon">ü§ç</span>
                    <span class="favorite-text">–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ</span>
                </button>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', favoritesHTML);
    }

    setupEventListeners() {
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const notificationBell = document.getElementById('notification-bell');
        const notificationsPanel = document.getElementById('notifications-panel');
        
        if (notificationBell) {
            notificationBell.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleNotifications();
            });
        }

        // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
        const favoritesButton = document.getElementById('favorites-button');
        const favoritesPanel = document.getElementById('favorites-panel');
        
        if (favoritesButton) {
            favoritesButton.addEventListener('click', (e) => {
                e.stopPropagation();
                this.toggleFavorites();
            });
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–µ–π –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –∏—Ö
        document.addEventListener('click', (e) => {
            if (notificationsPanel && !notificationsPanel.contains(e.target) && !notificationBell.contains(e.target)) {
                this.closeNotifications();
            }
            
            if (favoritesPanel && !favoritesPanel.contains(e.target) && !favoritesButton.contains(e.target)) {
                this.closeFavorites();
            }
        });

        // –¢–∞–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        document.querySelectorAll('.notification-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                document.querySelectorAll('.notification-tab').forEach(t => t.classList.remove('active'));
                e.target.classList.add('active');
                this.filterNotifications(e.target.dataset.tab);
            });
        });

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        const favoritesSort = document.getElementById('favorites-sort');
        if (favoritesSort) {
            favoritesSort.addEventListener('change', () => {
                this.renderFavorites();
            });
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        document.querySelectorAll('.setting-item input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.saveNotificationSettings();
            });
        });

        // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ–±—ä–µ–∫—Ç–∞
        if (this.isPropertyPage()) {
            this.showFavoriteButton();
        }
    }

    checkForUpdates() {
        // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç AJAX –∑–∞–ø—Ä–æ—Å)
        const mockUpdates = this.generateMockNotifications();
        
        mockUpdates.forEach(notification => {
            this.addNotification(notification);
        });
    }

    generateMockNotifications() {
        const notifications = [];
        const now = new Date();
        
        // –°–ª—É—á–∞–π–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (Math.random() < 0.1) { // 10% —à–∞–Ω—Å –Ω–∞ –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            const types = [
                {
                    type: 'property_price_change',
                    icon: 'üí∞',
                    title: '–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã',
                    message: '–¶–µ–Ω–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ 500 000 —Å–æ–º ($5,714)',
                    category: 'properties'
                },
                {
                    type: 'new_property',
                    icon: 'üè†',
                    title: '–ù–æ–≤—ã–π –æ–±—ä–µ–∫—Ç',
                    message: '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ —Ä–∞–π–æ–Ω–µ –¶–µ–Ω—Ç—Ä, –ë–∏—à–∫–µ–∫',
                    category: 'properties'
                },
                {
                    type: 'new_review',
                    icon: '‚≠ê',
                    title: '–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤',
                    message: '–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç',
                    category: 'properties'
                },
                {
                    type: 'system',
                    icon: 'üîß',
                    title: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã',
                    message: '–î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ 3D-–ø—Ä–æ—Å–º–æ—Ç—Ä',
                    category: 'system'
                }
            ];
            
            const randomType = types[Math.floor(Math.random() * types.length)];
            
            notifications.push({
                id: Date.now(),
                ...randomType,
                date: now.toISOString(),
                read: false,
                urgent: Math.random() < 0.2 // 20% —à–∞–Ω—Å –Ω–∞ —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            });
        }
        
        return notifications;
    }

    addNotification(notification) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        const exists = this.notifications.find(n => 
            n.type === notification.type && 
            n.message === notification.message
        );
        
        if (!exists) {
            this.notifications.unshift(notification);
            this.saveNotifications();
            this.updateNotificationBadge();
            this.renderNotifications();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showToastNotification(notification);
        }
    }

    showToastNotification(notification) {
        const toast = document.createElement('div');
        toast.className = `toast-notification ${notification.urgent ? 'urgent' : ''}`;
        toast.innerHTML = `
            <div class="toast-icon">${notification.icon}</div>
            <div class="toast-content">
                <div class="toast-title">${notification.title}</div>
                <div class="toast-message">${notification.message}</div>
            </div>
            <button class="toast-close" onclick="this.parentElement.remove()">√ó</button>
        `;

        document.body.appendChild(toast);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ—Å—Ç
        setTimeout(() => toast.classList.add('show'), 100);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                if (toast.parentElement) {
                    toast.parentElement.removeChild(toast);
                }
            }, 300);
        }, 5000);
    }

    toggleNotifications() {
        const panel = document.getElementById('notifications-panel');
        if (panel.classList.contains('active')) {
            this.closeNotifications();
        } else {
            panel.classList.add('active');
            this.renderNotifications();
        }
    }

    closeNotifications() {
        document.getElementById('notifications-panel').classList.remove('active');
    }

    renderNotifications(filter = 'all') {
        const notificationsList = document.getElementById('notifications-list');
        let filteredNotifications = [...this.notifications];

        if (filter !== 'all') {
            filteredNotifications = filteredNotifications.filter(n => n.category === filter);
        }

        if (filteredNotifications.length === 0) {
            notificationsList.innerHTML = `
                <div class="empty-notifications">
                    <div class="empty-icon">üîî</div>
                    <div class="empty-text">–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>
                </div>
            `;
            return;
        }

        notificationsList.innerHTML = filteredNotifications.map(notification => 
            this.createNotificationHTML(notification)
        ).join('');
    }

    createNotificationHTML(notification) {
        const timeAgo = this.getTimeAgo(new Date(notification.date));
        
        return `
            <div class="notification-item ${notification.read ? 'read' : 'unread'} ${notification.urgent ? 'urgent' : ''}" 
                 data-id="${notification.id}">
                <div class="notification-icon">${notification.icon}</div>
                <div class="notification-content">
                    <div class="notification-title">${notification.title}</div>
                    <div class="notification-message">${notification.message}</div>
                    <div class="notification-time">${timeAgo}</div>
                </div>
                <div class="notification-actions">
                    <button class="mark-read-btn" onclick="markAsRead(${notification.id})" 
                            style="${notification.read ? 'display: none;' : ''}">
                        ‚úì
                    </button>
                    <button class="delete-notification-btn" onclick="deleteNotification(${notification.id})">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
        `;
    }

    filterNotifications(filter) {
        this.renderNotifications(filter);
    }

    markAsRead(notificationId) {
        const notification = this.notifications.find(n => n.id === notificationId);
        if (notification) {
            notification.read = true;
            this.saveNotifications();
            this.updateNotificationBadge();
            this.renderNotifications();
        }
    }

    markAllAsRead() {
        this.notifications.forEach(n => n.read = true);
        this.saveNotifications();
        this.updateNotificationBadge();
        this.renderNotifications();
    }

    deleteNotification(notificationId) {
        this.notifications = this.notifications.filter(n => n.id !== notificationId);
        this.saveNotifications();
        this.updateNotificationBadge();
        this.renderNotifications();
    }

    updateNotificationBadge() {
        const badge = document.getElementById('notification-badge');
        const unreadCount = this.notifications.filter(n => !n.read).length;
        
        if (unreadCount > 0) {
            badge.textContent = unreadCount > 99 ? '99+' : unreadCount;
            badge.style.display = 'flex';
        } else {
            badge.style.display = 'none';
        }
    }

    // –ò–∑–±—Ä–∞–Ω–Ω–æ–µ
    toggleFavorites() {
        const panel = document.getElementById('favorites-panel');
        if (panel.classList.contains('active')) {
            this.closeFavorites();
        } else {
            panel.classList.add('active');
            this.renderFavorites();
        }
    }

    closeFavorites() {
        document.getElementById('favorites-panel').classList.remove('active');
    }

    isPropertyPage() {
        return window.location.pathname.includes('/Property/Details/');
    }

    showFavoriteButton() {
        const favoriteBtn = document.getElementById('add-to-favorites');
        if (favoriteBtn) {
            favoriteBtn.style.display = 'block';
            this.updateFavoriteButton();
        }
    }

    getCurrentPropertyId() {
        const pathParts = window.location.pathname.split('/');
        return parseInt(pathParts[pathParts.length - 1]);
    }

    toggleFavorite() {
        const propertyId = this.getCurrentPropertyId();
        if (!propertyId) return;

        const isFavorite = this.favorites.includes(propertyId);
        
        if (isFavorite) {
            this.removeFromFavorites(propertyId);
        } else {
            this.addToFavorites(propertyId);
        }
    }

    addToFavorites(propertyId) {
        if (!this.favorites.includes(propertyId)) {
            this.favorites.push(propertyId);
            this.saveFavorites();
            this.updateFavoriteButton();
            this.updateFavoritesCount();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.addNotification({
                id: Date.now(),
                type: 'favorite_added',
                icon: '‚ù§Ô∏è',
                title: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                message: '–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ',
                category: 'system',
                date: new Date().toISOString(),
                read: false,
                urgent: false
            });
        }
    }

    removeFromFavorites(propertyId) {
        this.favorites = this.favorites.filter(id => id !== propertyId);
        this.saveFavorites();
        this.updateFavoriteButton();
        this.updateFavoritesCount();
        this.renderFavorites(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞
    }

    updateFavoriteButton() {
        const propertyId = this.getCurrentPropertyId();
        const isFavorite = this.favorites.includes(propertyId);
        
        const favoriteIcon = document.querySelector('.favorite-icon');
        const favoriteText = document.querySelector('.favorite-text');
        
        if (favoriteIcon && favoriteText) {
            if (isFavorite) {
                favoriteIcon.textContent = '‚ù§Ô∏è';
                favoriteText.textContent = '–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ';
            } else {
                favoriteIcon.textContent = 'ü§ç';
                favoriteText.textContent = '–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ';
            }
        }
    }

    updateFavoritesCount() {
        const countElement = document.getElementById('favorites-count');
        if (countElement) {
            countElement.textContent = this.favorites.length;
        }
    }

    renderFavorites() {
        const favoritesList = document.getElementById('favorites-list');
        
        if (this.favorites.length === 0) {
            favoritesList.innerHTML = `
                <div class="empty-favorites">
                    <div class="empty-icon">‚ù§Ô∏è</div>
                    <div class="empty-text">–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤</div>
                    <div class="empty-hint">–î–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –æ–±—ä–µ–∫—Ç—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞</div>
                </div>
            `;
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç–æ–≤ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞)
        const favoriteProperties = this.generateFavoritePropertiesData();
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        const sortBy = document.getElementById('favorites-sort')?.value || 'date-desc';
        this.sortFavorites(favoriteProperties, sortBy);

        favoritesList.innerHTML = favoriteProperties.map(property => 
            this.createFavoritePropertyHTML(property)
        ).join('');
    }

    generateFavoritePropertiesData() {
        const districts = ['–¶–µ–Ω—Ç—Ä', '–í–æ—Å—Ç–æ–∫-5', '–î–∂–∞–ª', '–ê—Å–∞–Ω–±–∞–π', '–ö–æ–∫-–ñ–∞—Ä', '–ê–∫-–û—Ä–≥–æ', '–ê—Ä—á–∞-–ë–µ—à–∏–∫', '–ê–ª—Ç—ã–Ω-–ö–∞–∑—ã–∫'];
        const cities = ['–ë–∏—à–∫–µ–∫', '–û—à', '–î–∂–∞–ª–∞–ª-–ê–±–∞–¥', '–ö–∞—Ä–∞–∫–æ–ª', '–ù–∞—Ä—ã–Ω', '–¢–∞–ª–∞—Å'];
        
        return this.favorites.map(id => ({
            id: id,
            title: `–û–±—ä–µ–∫—Ç –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ #${id}`,
            price: Math.floor(Math.random() * 15000000) + 3000000, // –æ—Ç 3 –º–ª–Ω –¥–æ 18 –º–ª–Ω —Å–æ–º–æ–≤
            area: Math.floor(Math.random() * 150) + 40,
            rooms: Math.floor(Math.random() * 5) + 1,
            address: `${cities[Math.floor(Math.random() * cities.length)]}, ${districts[Math.floor(Math.random() * districts.length)]}`,
            image: '/images/no-image.svg',
            dateAdded: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()
        }));
    }

    createFavoritePropertyHTML(property) {
        const formattedPrice = this.formatMoney(property.price);
        const timeAgo = this.getTimeAgo(new Date(property.dateAdded));
        
        return `
            <div class="favorite-property" data-id="${property.id}">
                <div class="property-image">
                    <img src="${property.image}" alt="${property.title}">
                </div>
                
                <div class="property-info">
                    <h4 class="property-title">${property.title}</h4>
                    <div class="property-price">${formattedPrice}</div>
                    <div class="property-details">
                        <span class="property-area">${property.area} –º¬≤</span>
                        <span class="property-rooms">${property.rooms} –∫–æ–º–Ω.</span>
                    </div>
                    <div class="property-address">${property.address}</div>
                    <div class="property-added">–î–æ–±–∞–≤–ª–µ–Ω–æ: ${timeAgo}</div>
                </div>
                
                <div class="property-actions">
                    <button class="view-property-btn" onclick="viewProperty(${property.id})">
                        üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å
                    </button>
                    <button class="remove-favorite-btn" onclick="removeFromFavorites(${property.id})">
                        üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
    }

    sortFavorites(properties, sortBy) {
        switch (sortBy) {
            case 'date-desc':
                properties.sort((a, b) => new Date(b.dateAdded) - new Date(a.dateAdded));
                break;
            case 'date-asc':
                properties.sort((a, b) => new Date(a.dateAdded) - new Date(b.dateAdded));
                break;
            case 'price-asc':
                properties.sort((a, b) => a.price - b.price);
                break;
            case 'price-desc':
                properties.sort((a, b) => b.price - a.price);
                break;
            case 'area-asc':
                properties.sort((a, b) => a.area - b.area);
                break;
            case 'area-desc':
                properties.sort((a, b) => b.area - a.area);
                break;
        }
    }

    compareAllFavorites() {
        if (this.favorites.length < 2) {
            alert('–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 2 –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            return;
        }
        
        const compareUrl = '/Property/Compare?' + this.favorites.map(id => `ids=${id}`).join('&');
        window.open(compareUrl, '_blank');
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    getTimeAgo(date) {
        const now = new Date();
        const diffInMinutes = Math.floor((now - date) / (1000 * 60));
        
        if (diffInMinutes < 1) return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
        if (diffInMinutes < 60) return `${diffInMinutes} –º–∏–Ω –Ω–∞–∑–∞–¥`;
        
        const diffInHours = Math.floor(diffInMinutes / 60);
        if (diffInHours < 24) return `${diffInHours} —á –Ω–∞–∑–∞–¥`;
        
        const diffInDays = Math.floor(diffInHours / 24);
        if (diffInDays < 7) return `${diffInDays} –¥–Ω –Ω–∞–∑–∞–¥`;
        
        return date.toLocaleDateString('ru-RU');
    }

    formatMoney(amount) {
        const kgsAmount = new Intl.NumberFormat('ky-KG').format(amount) + ' —Å–æ–º';
        const usdAmount = new Intl.NumberFormat('en-US', {
            style: 'currency',
            currency: 'USD',
            minimumFractionDigits: 0,
            maximumFractionDigits: 0
        }).format(amount / 87.5); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –¥–æ–ª–ª–∞—Ä—ã
        
        return `${kgsAmount} (${usdAmount})`;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    saveNotifications() {
        localStorage.setItem('real_estate_notifications', JSON.stringify(this.notifications));
    }

    loadNotifications() {
        const saved = localStorage.getItem('real_estate_notifications');
        return saved ? JSON.parse(saved) : [];
    }

    saveFavorites() {
        localStorage.setItem('real_estate_favorites', JSON.stringify(this.favorites));
    }

    loadFavorites() {
        const saved = localStorage.getItem('real_estate_favorites');
        return saved ? JSON.parse(saved) : [];
    }

    saveSubscriptions() {
        localStorage.setItem('real_estate_subscriptions', JSON.stringify(this.subscriptions));
    }

    loadSubscriptions() {
        const saved = localStorage.getItem('real_estate_subscriptions');
        return saved ? JSON.parse(saved) : {};
    }

    saveNotificationSettings() {
        const settings = {
            priceChanges: document.getElementById('notify-price-changes')?.checked || false,
            newProperties: document.getElementById('notify-new-properties')?.checked || false,
            reviews: document.getElementById('notify-reviews')?.checked || false
        };
        
        localStorage.setItem('notification_settings', JSON.stringify(settings));
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
let notificationSystem = null;

function initNotificationSystem() {
    notificationSystem = new NotificationSystem();
}

function markAsRead(notificationId) {
    if (notificationSystem) {
        notificationSystem.markAsRead(notificationId);
    }
}

function markAllAsRead() {
    if (notificationSystem) {
        notificationSystem.markAllAsRead();
    }
}

function deleteNotification(notificationId) {
    if (notificationSystem) {
        notificationSystem.deleteNotification(notificationId);
    }
}

function closeNotifications() {
    if (notificationSystem) {
        notificationSystem.closeNotifications();
    }
}

function toggleFavorite() {
    if (notificationSystem) {
        notificationSystem.toggleFavorite();
    }
}

function removeFromFavorites(propertyId) {
    if (notificationSystem) {
        notificationSystem.removeFromFavorites(propertyId);
    }
}

function closeFavorites() {
    if (notificationSystem) {
        notificationSystem.closeFavorites();
    }
}

function compareAllFavorites() {
    if (notificationSystem) {
        notificationSystem.compareAllFavorites();
    }
}

function viewProperty(propertyId) {
    window.open(`/Property/Details/${propertyId}`, '_blank');
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    initNotificationSystem();
});