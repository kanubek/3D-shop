class MortgageCalculator {
    constructor() {
        this.currentCalculation = null;
        this.banks = this.getBanksData();
        this.currentCurrency = 'KGS'; // KGS –∏–ª–∏ USD
        this.exchangeRates = {
            USD_TO_KGS: 87.5, // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å USD –∫ —Å–æ–º—É
            KGS_TO_USD: 1/87.5
        };
        this.init();
    }

    init() {
        this.createCalculatorInterface();
        this.setupEventListeners();
        this.loadBankPrograms();
    }

    getBanksData() {
        return [
            {
                id: 1,
                name: "KICB",
                logo: "üèõÔ∏è",
                programs: [
                    { name: "–ñ–∏–ª–∏—â–Ω—ã–π –∫—Ä–µ–¥–∏—Ç", rate: 16.0, minRate: 16.0, maxRate: 22.0, minDownPayment: 30 },
                    { name: "–ò–ø–æ—Ç–µ–∫–∞ –ö–æ–º—Ñ–æ—Ä—Ç", rate: 17.5, minRate: 17.5, maxRate: 21.0, minDownPayment: 25 },
                    { name: "–ú–æ–ª–æ–¥–∞—è —Å–µ–º—å—è", rate: 15.0, minRate: 15.0, maxRate: 18.0, minDownPayment: 20 }
                ]
            },
            {
                id: 2,
                name: "–û–ø—Ç–∏–º–∞ –ë–∞–Ω–∫",
                logo: "ÔøΩ",
                programs: [
                    { name: "–ú–æ–π –¥–æ–º", rate: 17.0, minRate: 17.0, maxRate: 23.0, minDownPayment: 30 },
                    { name: "–°–µ–º–µ–π–Ω–∞—è –∏–ø–æ—Ç–µ–∫–∞", rate: 16.5, minRate: 16.5, maxRate: 20.5, minDownPayment: 25 }
                ]
            },
            {
                id: 3,
                name: "–ë–∞–Ω–∫ –ê–∑–∏–∏",
                logo: "üè¶",
                programs: [
                    { name: "–ñ–∏–ª—å–µ –≤ –∫—Ä–µ–¥–∏—Ç", rate: 18.0, minRate: 18.0, maxRate: 24.0, minDownPayment: 35 },
                    { name: "–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏", rate: 17.0, minRate: 17.0, maxRate: 21.0, minDownPayment: 30 }
                ]
            },
            {
                id: 4,
                name: "–ê–π—ã–ª –ë–∞–Ω–∫",
                logo: "üåæ",
                programs: [
                    { name: "–°–µ–ª—å—Å–∫–∞—è –∏–ø–æ—Ç–µ–∫–∞", rate: 14.0, minRate: 14.0, maxRate: 18.0, minDownPayment: 20 },
                    { name: "–ñ–∏–ª—å–µ –¥–ª—è –º–æ–ª–æ–¥–µ–∂–∏", rate: 15.5, minRate: 15.5, maxRate: 19.0, minDownPayment: 25 }
                ]
            },
            {
                id: 5,
                name: "–†–°–ö –ë–∞–Ω–∫",
                logo: "ÔøΩ",
                programs: [
                    { name: "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å", rate: 16.8, minRate: 16.8, maxRate: 22.5, minDownPayment: 30 }
                ]
            },
            {
                id: 6,
                name: "–ë–∞–π-–¢—É—à—É–º –ë–∞–Ω–∫",
                logo: "üè™",
                programs: [
                    { name: "–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç", rate: 17.2, minRate: 17.2, maxRate: 21.8, minDownPayment: 25 }
                ]
            }
        ];
    }

    createCalculatorInterface() {
        const calculatorHTML = `
            <div class="mortgage-calculator" id="mortgage-calculator">
                <div class="calculator-header">
                    <h3>üè¶ –ò–ø–æ—Ç–µ—á–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</h3>
                    <div class="calculator-subtitle">
                        –†–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –∏–ø–æ—Ç–µ–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ
                    </div>
                    <div class="currency-selector">
                        <button class="currency-btn active" data-currency="KGS" onclick="switchCurrency('KGS')">
                            üí∞ –°–æ–º (KGS)
                        </button>
                        <button class="currency-btn" data-currency="USD" onclick="switchCurrency('USD')">
                            üíµ –î–æ–ª–ª–∞—Ä (USD)
                        </button>
                    </div>
                </div>

                <div class="calculator-content">
                    <div class="calculator-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="property-cost">–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</label>
                                <div class="input-with-currency">
                                    <input type="number" id="property-cost" placeholder="0" min="500000" max="50000000" step="50000">
                                    <span class="currency" id="property-cost-currency">—Å–æ–º</span>
                                </div>
                                <div class="currency-conversion" id="property-cost-conversion">
                                    ‚âà $0
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="down-payment">–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å</label>
                                <div class="input-with-currency">
                                    <input type="number" id="down-payment" placeholder="0" min="0" step="25000">
                                    <span class="currency" id="down-payment-currency">—Å–æ–º</span>
                                </div>
                                <div class="currency-conversion" id="down-payment-conversion">
                                    ‚âà $0
                                </div>
                                <div class="slider-container">
                                    <input type="range" id="down-payment-slider" min="0" max="50" value="25" step="5">
                                    <div class="slider-labels">
                                        <span>0%</span>
                                        <span id="down-payment-percent">25%</span>
                                        <span>50%</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="loan-term">–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞</label>
                                <div class="input-with-currency">
                                    <input type="number" id="loan-term" value="20" min="1" max="30" step="1">
                                    <span class="currency">–ª–µ—Ç</span>
                                </div>
                                <div class="slider-container">
                                    <input type="range" id="loan-term-slider" min="1" max="30" value="20" step="1">
                                    <div class="slider-labels">
                                        <span>1 –≥–æ–¥</span>
                                        <span>15 –ª–µ—Ç</span>
                                        <span>30 –ª–µ—Ç</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-row">
                            <div class="form-group">
                                <label for="monthly-income">–í–∞—à –¥–æ—Ö–æ–¥ –≤ –º–µ—Å—è—Ü</label>
                                <div class="input-with-currency">
                                    <input type="number" id="monthly-income" placeholder="0" min="0" step="5000">
                                    <span class="currency" id="monthly-income-currency">—Å–æ–º</span>
                                </div>
                                <div class="currency-conversion" id="monthly-income-conversion">
                                    ‚âà $0
                                </div>
                                <div class="income-hint">
                                    üí° –í –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ –±–∞–Ω–∫–∏ —Ç—Ä–µ–±—É—é—Ç –¥–æ—Ö–æ–¥ –≤ 2.5-3 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                                </div>
                            </div>
                        </div>

                        <button type="button" class="calculate-btn" onclick="calculateMortgage()">
                            üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–ø–æ—Ç–µ–∫—É
                        </button>
                    </div>

                    <div class="calculation-results" id="calculation-results" style="display: none;">
                        <div class="results-summary">
                            <div class="summary-item">
                                <div class="summary-icon">üí∞</div>
                                <div class="summary-content">
                                    <div class="summary-label">–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂</div>
                                    <div class="summary-value" id="monthly-payment">0 ‚ÇΩ</div>
                                </div>
                            </div>
                            
                            <div class="summary-item">
                                <div class="summary-icon">üìä</div>
                                <div class="summary-content">
                                    <div class="summary-label">–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞</div>
                                    <div class="summary-value" id="loan-amount">0 ‚ÇΩ</div>
                                </div>
                            </div>
                            
                            <div class="summary-item">
                                <div class="summary-icon">üí∏</div>
                                <div class="summary-content">
                                    <div class="summary-label">–ü–µ—Ä–µ–ø–ª–∞—Ç–∞</div>
                                    <div class="summary-value" id="overpayment">0 ‚ÇΩ</div>
                                </div>
                            </div>
                            
                            <div class="summary-item">
                                <div class="summary-icon">üìà</div>
                                <div class="summary-content">
                                    <div class="summary-label">–û–±—â–∞—è —Å—É–º–º–∞</div>
                                    <div class="summary-value" id="total-payment">0 ‚ÇΩ</div>
                                </div>
                            </div>
                        </div>

                        <div class="affordability-check" id="affordability-check">
                            <!-- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                        </div>
                    </div>
                </div>

                <div class="bank-programs" id="bank-programs">
                    <h4>üèõÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º—ã –±–∞–Ω–∫–æ–≤</h4>
                    <div class="programs-list" id="programs-list">
                        <!-- –ü—Ä–æ–≥—Ä–∞–º–º—ã –±–∞–Ω–∫–æ–≤ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ -->
                    </div>
                </div>

                <div class="calculator-actions">
                    <button class="action-btn" onclick="openMortgageApplication()">
                        üìã –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∏–ø–æ—Ç–µ–∫—É
                    </button>
                    <button class="action-btn secondary" onclick="downloadCalculation()">
                        üì• –°–∫–∞—á–∞—Ç—å —Ä–∞—Å—á–µ—Ç
                    </button>
                    <button class="action-btn secondary" onclick="shareMortgageCalculation()">
                        üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å—á–µ—Ç–æ–º
                    </button>
                </div>
            </div>
        `;

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ (–ø–æ—Å–ª–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤)
        const insertTarget = document.querySelector('.reviews-section') || document.querySelector('.property-specs');
        if (insertTarget) {
            insertTarget.insertAdjacentHTML('afterend', calculatorHTML);
        }
    }

    setupEventListeners() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ–π –∏ —Å–ª–∞–π–¥–µ—Ä–æ–≤
        const propertyCost = document.getElementById('property-cost');
        const downPayment = document.getElementById('down-payment');
        const downPaymentSlider = document.getElementById('down-payment-slider');
        const downPaymentPercent = document.getElementById('down-payment-percent');
        const loanTerm = document.getElementById('loan-term');
        const loanTermSlider = document.getElementById('loan-term-slider');

        if (propertyCost) {
            propertyCost.addEventListener('input', (e) => {
                this.updateDownPaymentFromPercent();
                this.updateConversions();
                this.autoCalculate();
            });
        }

        if (downPayment) {
            downPayment.addEventListener('input', (e) => {
                this.updateDownPaymentPercent();
                this.updateConversions();
                this.autoCalculate();
            });
        }

        if (downPaymentSlider) {
            downPaymentSlider.addEventListener('input', (e) => {
                const percent = e.target.value;
                downPaymentPercent.textContent = `${percent}%`;
                this.updateDownPaymentFromPercent();
                this.autoCalculate();
            });
        }

        if (loanTerm) {
            loanTerm.addEventListener('input', (e) => {
                if (loanTermSlider) {
                    loanTermSlider.value = e.target.value;
                }
                this.autoCalculate();
            });
        }

        if (loanTermSlider) {
            loanTermSlider.addEventListener('input', (e) => {
                if (loanTerm) {
                    loanTerm.value = e.target.value;
                }
                this.autoCalculate();
            });
        }

        const monthlyIncome = document.getElementById('monthly-income');
        if (monthlyIncome) {
            monthlyIncome.addEventListener('input', () => {
                this.updateConversions();
                this.updateAffordabilityCheck();
            });
        }
    }

    updateDownPaymentFromPercent() {
        const propertyCost = parseFloat(document.getElementById('property-cost').value) || 0;
        const percent = parseFloat(document.getElementById('down-payment-slider').value) || 0;
        const downPaymentAmount = Math.round(propertyCost * percent / 100);
        
        document.getElementById('down-payment').value = downPaymentAmount;
    }

    updateDownPaymentPercent() {
        const propertyCost = parseFloat(document.getElementById('property-cost').value) || 0;
        const downPayment = parseFloat(document.getElementById('down-payment').value) || 0;
        
        if (propertyCost > 0) {
            const percent = Math.round((downPayment / propertyCost) * 100);
            document.getElementById('down-payment-slider').value = Math.min(percent, 50);
            document.getElementById('down-payment-percent').textContent = `${Math.min(percent, 50)}%`;
        }
    }

    loadBankPrograms() {
        const programsList = document.getElementById('programs-list');
        if (!programsList) return;

        let programsHTML = '';
        
        this.banks.forEach(bank => {
            bank.programs.forEach((program, index) => {
                programsHTML += `
                    <div class="bank-program" data-bank-id="${bank.id}" data-program-index="${index}">
                        <div class="bank-info">
                            <div class="bank-logo">${bank.logo}</div>
                            <div class="bank-details">
                                <div class="bank-name">${bank.name}</div>
                                <div class="program-name">${program.name}</div>
                            </div>
                        </div>
                        
                        <div class="program-details">
                            <div class="rate-info">
                                <div class="rate-value">${program.rate}%</div>
                                <div class="rate-range">–æ—Ç ${program.minRate}%</div>
                            </div>
                            
                            <div class="program-features">
                                <div class="feature">
                                    <span class="feature-icon">üí∞</span>
                                    <span class="feature-text">–û—Ç ${program.minDownPayment}%</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="program-actions">
                            <button class="select-program-btn" onclick="selectBankProgram(${bank.id}, ${index})">
                                –í—ã–±—Ä–∞—Ç—å
                            </button>
                        </div>
                    </div>
                `;
            });
        });

        programsList.innerHTML = programsHTML;
    }

    switchCurrency(currency) {
        this.currentCurrency = currency;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.currency-btn').forEach(btn => {
            btn.classList.remove('active');
            if (btn.dataset.currency === currency) {
                btn.classList.add('active');
            }
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç
        const currencySymbol = currency === 'KGS' ? '—Å–æ–º' : '$';
        document.getElementById('property-cost-currency').textContent = currencySymbol;
        document.getElementById('down-payment-currency').textContent = currencySymbol;
        document.getElementById('monthly-income-currency').textContent = currencySymbol;
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        this.convertValues(currency);
        this.updateConversions();
        this.autoCalculate();
    }
    
    convertValues(newCurrency) {
        const propertyCostInput = document.getElementById('property-cost');
        const downPaymentInput = document.getElementById('down-payment');
        const monthlyIncomeInput = document.getElementById('monthly-income');
        
        if (newCurrency === 'USD' && this.currentCurrency !== 'USD') {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ —Å–æ–º–æ–≤ –≤ –¥–æ–ª–ª–∞—Ä—ã
            propertyCostInput.value = Math.round((parseFloat(propertyCostInput.value) || 0) * this.exchangeRates.KGS_TO_USD);
            downPaymentInput.value = Math.round((parseFloat(downPaymentInput.value) || 0) * this.exchangeRates.KGS_TO_USD);
            monthlyIncomeInput.value = Math.round((parseFloat(monthlyIncomeInput.value) || 0) * this.exchangeRates.KGS_TO_USD);
        } else if (newCurrency === 'KGS' && this.currentCurrency !== 'KGS') {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Å–æ–º—ã
            propertyCostInput.value = Math.round((parseFloat(propertyCostInput.value) || 0) * this.exchangeRates.USD_TO_KGS);
            downPaymentInput.value = Math.round((parseFloat(downPaymentInput.value) || 0) * this.exchangeRates.USD_TO_KGS);
            monthlyIncomeInput.value = Math.round((parseFloat(monthlyIncomeInput.value) || 0) * this.exchangeRates.USD_TO_KGS);
        }
    }
    
    updateConversions() {
        const propertyCost = parseFloat(document.getElementById('property-cost').value) || 0;
        const downPayment = parseFloat(document.getElementById('down-payment').value) || 0;
        const monthlyIncome = parseFloat(document.getElementById('monthly-income').value) || 0;
        
        if (this.currentCurrency === 'KGS') {
            document.getElementById('property-cost-conversion').textContent = 
                `‚âà $${Math.round(propertyCost * this.exchangeRates.KGS_TO_USD).toLocaleString()}`;
            document.getElementById('down-payment-conversion').textContent = 
                `‚âà $${Math.round(downPayment * this.exchangeRates.KGS_TO_USD).toLocaleString()}`;
            document.getElementById('monthly-income-conversion').textContent = 
                `‚âà $${Math.round(monthlyIncome * this.exchangeRates.KGS_TO_USD).toLocaleString()}`;
        } else {
            document.getElementById('property-cost-conversion').textContent = 
                `‚âà ${Math.round(propertyCost * this.exchangeRates.USD_TO_KGS).toLocaleString()} —Å–æ–º`;
            document.getElementById('down-payment-conversion').textContent = 
                `‚âà ${Math.round(downPayment * this.exchangeRates.USD_TO_KGS).toLocaleString()} —Å–æ–º`;
            document.getElementById('monthly-income-conversion').textContent = 
                `‚âà ${Math.round(monthlyIncome * this.exchangeRates.USD_TO_KGS).toLocaleString()} —Å–æ–º`;
        }
    }

    calculateMortgage() {
        const propertyCost = parseFloat(document.getElementById('property-cost').value) || 0;
        const downPayment = parseFloat(document.getElementById('down-payment').value) || 0;
        const loanTerm = parseInt(document.getElementById('loan-term').value) || 20;
        const monthlyIncome = parseFloat(document.getElementById('monthly-income').value) || 0;

        if (propertyCost <= 0) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
            return;
        }

        if (downPayment >= propertyCost) {
            alert('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏');
            return;
        }

        // –†–∞—Å—á–µ—Ç –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω–µ
        const averageRate = 17.0; // –°—Ä–µ–¥–Ω—è—è —Å—Ç–∞–≤–∫–∞ –ø–æ —Ä—ã–Ω–∫—É –ö–†
        const loanAmount = propertyCost - downPayment;
        
        const calculation = this.performMortgageCalculation(loanAmount, averageRate, loanTerm);
        
        this.displayResults(calculation, monthlyIncome);
        this.calculateBankPrograms(propertyCost, downPayment, loanTerm);
        
        this.currentCalculation = {
            propertyCost,
            downPayment,
            loanTerm,
            monthlyIncome,
            calculation
        };
    }

    performMortgageCalculation(loanAmount, annualRate, years) {
        const monthlyRate = annualRate / 100 / 12;
        const numberOfPayments = years * 12;
        
        // –ê–Ω–Ω—É–∏—Ç–µ—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        const monthlyPayment = loanAmount * (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) /
                              (Math.pow(1 + monthlyRate, numberOfPayments) - 1);
        
        const totalPayment = monthlyPayment * numberOfPayments;
        const overpayment = totalPayment - loanAmount;
        
        return {
            loanAmount,
            monthlyPayment,
            totalPayment,
            overpayment,
            rate: annualRate
        };
    }

    displayResults(calculation, monthlyIncome) {
        document.getElementById('monthly-payment').textContent = this.formatMoney(calculation.monthlyPayment);
        document.getElementById('loan-amount').textContent = this.formatMoney(calculation.loanAmount);
        document.getElementById('overpayment').textContent = this.formatMoney(calculation.overpayment);
        document.getElementById('total-payment').textContent = this.formatMoney(calculation.totalPayment);
        
        document.getElementById('calculation-results').style.display = 'block';
        
        this.updateAffordabilityCheck(calculation.monthlyPayment, monthlyIncome);
    }

    updateAffordabilityCheck(monthlyPayment = null, income = null) {
        const affordabilityDiv = document.getElementById('affordability-check');
        if (!affordabilityDiv) return;

        if (monthlyPayment === null) {
            if (!this.currentCalculation) return;
            monthlyPayment = this.currentCalculation.calculation.monthlyPayment;
        }

        if (income === null) {
            income = parseFloat(document.getElementById('monthly-income').value) || 0;
        }

        if (income <= 0) {
            affordabilityDiv.innerHTML = `
                <div class="affordability-neutral">
                    <div class="affordability-icon">üí°</div>
                    <div class="affordability-text">
                        –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –¥–æ—Ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
                    </div>
                </div>
            `;
            return;
        }

        const paymentToIncomeRatio = monthlyPayment / income;
        const maxRecommendedRatio = 0.4; // –ú–∞–∫—Å–∏–º—É–º 40% –¥–æ—Ö–æ–¥–∞
        const bankApprovalRatio = 0.5; // –ë–∞–Ω–∫–∏ –æ–±—ã—á–Ω–æ –æ–¥–æ–±—Ä—è—é—Ç –¥–æ 50%

        let affordabilityHTML = '';
        
        if (paymentToIncomeRatio <= maxRecommendedRatio) {
            affordabilityHTML = `
                <div class="affordability-good">
                    <div class="affordability-icon">‚úÖ</div>
                    <div class="affordability-text">
                        <strong>–û—Ç–ª–∏—á–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å!</strong><br>
                        –ü–ª–∞—Ç–µ–∂ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${(paymentToIncomeRatio * 100).toFixed(1)}% –æ—Ç –¥–æ—Ö–æ–¥–∞.
                        –≠—Ç–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.
                    </div>
                </div>
            `;
        } else if (paymentToIncomeRatio <= bankApprovalRatio) {
            affordabilityHTML = `
                <div class="affordability-warning">
                    <div class="affordability-icon">‚ö†Ô∏è</div>
                    <div class="affordability-text">
                        <strong>–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞</strong><br>
                        –ü–ª–∞—Ç–µ–∂ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${(paymentToIncomeRatio * 100).toFixed(1)}% –æ—Ç –¥–æ—Ö–æ–¥–∞.
                        –ë–∞–Ω–∫ –º–æ–∂–µ—Ç –æ–¥–æ–±—Ä–∏—Ç—å –∫—Ä–µ–¥–∏—Ç, –Ω–æ –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –±—é–¥–∂–µ—Ç –±—É–¥–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–π.
                    </div>
                </div>
            `;
        } else {
            affordabilityHTML = `
                <div class="affordability-bad">
                    <div class="affordability-icon">‚ùå</div>
                    <div class="affordability-text">
                        <strong>–ö—Ä–µ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</strong><br>
                        –ü–ª–∞—Ç–µ–∂ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${(paymentToIncomeRatio * 100).toFixed(1)}% –æ—Ç –¥–æ—Ö–æ–¥–∞.
                        –ë–∞–Ω–∫–∏ –≤—Ä—è–¥ –ª–∏ –æ–¥–æ–±—Ä—è—Ç —Ç–∞–∫–æ–π –∫—Ä–µ–¥–∏—Ç. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞.
                    </div>
                </div>
            `;
        }

        affordabilityDiv.innerHTML = affordabilityHTML;
    }

    calculateBankPrograms(propertyCost, downPayment, loanTerm) {
        const loanAmount = propertyCost - downPayment;
        const downPaymentPercent = (downPayment / propertyCost) * 100;

        document.querySelectorAll('.bank-program').forEach((programElement) => {
            const bankId = parseInt(programElement.dataset.bankId);
            const programIndex = parseInt(programElement.dataset.programIndex);
            
            const bank = this.banks.find(b => b.id === bankId);
            const program = bank.programs[programIndex];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞
            const isEligible = downPaymentPercent >= program.minDownPayment;
            
            if (isEligible) {
                const calculation = this.performMortgageCalculation(loanAmount, program.rate, loanTerm);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
                const monthlyPaymentElement = programElement.querySelector('.monthly-payment');
                if (!monthlyPaymentElement) {
                    const programDetails = programElement.querySelector('.program-details');
                    programDetails.insertAdjacentHTML('beforeend', `
                        <div class="monthly-payment">
                            ${this.formatMoney(calculation.monthlyPayment)}/–º–µ—Å
                        </div>
                    `);
                }
                
                programElement.classList.remove('ineligible');
            } else {
                programElement.classList.add('ineligible');
                const ineligibleText = programElement.querySelector('.ineligible-text');
                if (!ineligibleText) {
                    programElement.insertAdjacentHTML('beforeend', `
                        <div class="ineligible-text">
                            –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–∑–Ω–æ—Å –æ—Ç ${program.minDownPayment}%
                        </div>
                    `);
                }
            }
        });
    }

    autoCalculate() {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π
        const propertyCost = parseFloat(document.getElementById('property-cost').value) || 0;
        const downPayment = parseFloat(document.getElementById('down-payment').value) || 0;
        
        if (propertyCost > 0 && downPayment < propertyCost) {
            this.calculateMortgage();
        }
    }

    formatMoney(amount) {
        if (this.currentCurrency === 'KGS') {
            return new Intl.NumberFormat('ky-KG').format(amount) + ' —Å–æ–º';
        } else {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD',
                minimumFractionDigits: 0,
                maximumFractionDigits: 0
            }).format(amount);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
let mortgageCalculator = null;

function initMortgageCalculator(propertyCost = null) {
    mortgageCalculator = new MortgageCalculator();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—ä–µ–∫—Ç–∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞
    if (propertyCost) {
        const costInput = document.getElementById('property-cost');
        if (costInput) {
            costInput.value = propertyCost;
            mortgageCalculator.updateDownPaymentFromPercent();
        }
    }
}

function calculateMortgage() {
    if (mortgageCalculator) {
        mortgageCalculator.calculateMortgage();
    }
}

function selectBankProgram(bankId, programIndex) {
    console.log('Selected bank program:', bankId, programIndex);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    alert('–§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
}

function openMortgageApplication() {
    // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–ø–æ—Ç–µ–∫—É
    window.open('https://www.sberbank.ru/ru/person/credits/home/application', '_blank');
}

function downloadCalculation() {
    if (!mortgageCalculator || !mortgageCalculator.currentCalculation) {
        alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—á–µ—Ç');
        return;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–∞—Å—á–µ—Ç–æ–º
    const calc = mortgageCalculator.currentCalculation;
    const content = `
–†–ê–°–ß–ï–¢ –ò–ü–û–¢–ï–ö–ò
=================

–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: ${mortgageCalculator.formatMoney(calc.propertyCost)}
–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: ${mortgageCalculator.formatMoney(calc.downPayment)}
–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: ${mortgageCalculator.formatMoney(calc.calculation.loanAmount)}
–°—Ä–æ–∫ –∫—Ä–µ–¥–∏—Ç–∞: ${calc.loanTerm} –ª–µ—Ç

–†–ï–ó–£–õ–¨–¢–ê–¢:
–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: ${mortgageCalculator.formatMoney(calc.calculation.monthlyPayment)}
–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: ${mortgageCalculator.formatMoney(calc.calculation.overpayment)}
–û–±—â–∞—è —Å—É–º–º–∞ –∫ –¥–æ–ø–ª–∞—Ç–µ: ${mortgageCalculator.formatMoney(calc.calculation.totalPayment)}

–†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω: ${new Date().toLocaleString('ru-RU')}
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'mortgage_calculation.txt';
    a.click();
    URL.revokeObjectURL(url);
}

function shareMortgageCalculation() {
    if (!mortgageCalculator || !mortgageCalculator.currentCalculation) {
        alert('–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—á–µ—Ç');
        return;
    }
    
    const calc = mortgageCalculator.currentCalculation;
    const text = `–†–∞—Å—á–µ—Ç –∏–ø–æ—Ç–µ–∫–∏: ${mortgageCalculator.formatMoney(calc.calculation.monthlyPayment)}/–º–µ—Å –Ω–∞ ${calc.loanTerm} –ª–µ—Ç`;
    
    if (navigator.share) {
        navigator.share({
            title: '–†–∞—Å—á–µ—Ç –∏–ø–æ—Ç–µ–∫–∏',
            text: text,
            url: window.location.href
        });
    } else {
        navigator.clipboard.writeText(text + '\n' + window.location.href);
        alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
    }
}

function switchCurrency(currency) {
    if (mortgageCalculator) {
        mortgageCalculator.switchCurrency(currency);
    }
}